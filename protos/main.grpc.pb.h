// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: main.proto
// Original file comments:
//
// Copyright NNext Co. and/or licensed to NNext Co.
// @author [Peter. Njenga]
//
// This file and its contents are licensed under the NNext License.
// Please see the included NOTICE for copyright information and
// LICENSE for a copy of the license.
//
#ifndef GRPC_main_2eproto__INCLUDED
#define GRPC_main_2eproto__INCLUDED

#include "main.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace nnext {

// The nnext service definition.
class NNext final {
 public:
  static constexpr char const* service_full_name() {
    return "nnext.NNext";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::nnext::Index* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>> AsyncCreateIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status ListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::nnext::ListIndicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::ListIndicesResponse>> AsyncListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::ListIndicesResponse>>(AsyncListIndicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::ListIndicesResponse>> PrepareAsyncListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::ListIndicesResponse>>(PrepareAsyncListIndicesRaw(context, request, cq));
    }
    virtual ::grpc::Status DropIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::nnext::Index* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>> AsyncDropIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>>(AsyncDropIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>> PrepareAsyncDropIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>>(PrepareAsyncDropIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status GetIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::nnext::Index* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>> AsyncGetIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>>(AsyncGetIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>> PrepareAsyncGetIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>>(PrepareAsyncGetIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status VectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::nnext::VectorAddResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorAddResponse>> AsyncVectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorAddResponse>>(AsyncVectorAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorAddResponse>> PrepareAsyncVectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorAddResponse>>(PrepareAsyncVectorAddRaw(context, request, cq));
    }
    virtual ::grpc::Status VectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::nnext::VectorGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorGetResponse>> AsyncVectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorGetResponse>>(AsyncVectorGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorGetResponse>> PrepareAsyncVectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorGetResponse>>(PrepareAsyncVectorGetRaw(context, request, cq));
    }
    virtual ::grpc::Status VectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::nnext::VectorSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorSearchResponse>> AsyncVectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorSearchResponse>>(AsyncVectorSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorSearchResponse>> PrepareAsyncVectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorSearchResponse>>(PrepareAsyncVectorSearchRaw(context, request, cq));
    }
    virtual ::grpc::Status VectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::nnext::VectorDeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorDeleteResponse>> AsyncVectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorDeleteResponse>>(AsyncVectorDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorDeleteResponse>> PrepareAsyncVectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorDeleteResponse>>(PrepareAsyncVectorDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status VectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::nnext::VectorClearResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorClearResponse>> AsyncVectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorClearResponse>>(AsyncVectorClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorClearResponse>> PrepareAsyncVectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorClearResponse>>(PrepareAsyncVectorClearRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest* request, ::nnext::ListIndicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest* request, ::nnext::ListIndicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DropIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest* request, ::nnext::VectorAddResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest* request, ::nnext::VectorAddResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest* request, ::nnext::VectorGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest* request, ::nnext::VectorGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest* request, ::nnext::VectorSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest* request, ::nnext::VectorSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest* request, ::nnext::VectorDeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest* request, ::nnext::VectorDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest* request, ::nnext::VectorClearResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest* request, ::nnext::VectorClearResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::ListIndicesResponse>* AsyncListIndicesRaw(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::ListIndicesResponse>* PrepareAsyncListIndicesRaw(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>* AsyncDropIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>* PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>* AsyncGetIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::Index>* PrepareAsyncGetIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorAddResponse>* AsyncVectorAddRaw(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorAddResponse>* PrepareAsyncVectorAddRaw(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorGetResponse>* AsyncVectorGetRaw(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorGetResponse>* PrepareAsyncVectorGetRaw(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorSearchResponse>* AsyncVectorSearchRaw(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorSearchResponse>* PrepareAsyncVectorSearchRaw(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorDeleteResponse>* AsyncVectorDeleteRaw(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorDeleteResponse>* PrepareAsyncVectorDeleteRaw(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorClearResponse>* AsyncVectorClearRaw(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nnext::VectorClearResponse>* PrepareAsyncVectorClearRaw(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::nnext::Index* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>> AsyncCreateIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    ::grpc::Status ListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::nnext::ListIndicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::ListIndicesResponse>> AsyncListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::ListIndicesResponse>>(AsyncListIndicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::ListIndicesResponse>> PrepareAsyncListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::ListIndicesResponse>>(PrepareAsyncListIndicesRaw(context, request, cq));
    }
    ::grpc::Status DropIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::nnext::Index* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>> AsyncDropIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>>(AsyncDropIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>> PrepareAsyncDropIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>>(PrepareAsyncDropIndexRaw(context, request, cq));
    }
    ::grpc::Status GetIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::nnext::Index* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>> AsyncGetIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>>(AsyncGetIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>> PrepareAsyncGetIndex(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::Index>>(PrepareAsyncGetIndexRaw(context, request, cq));
    }
    ::grpc::Status VectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::nnext::VectorAddResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorAddResponse>> AsyncVectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorAddResponse>>(AsyncVectorAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorAddResponse>> PrepareAsyncVectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorAddResponse>>(PrepareAsyncVectorAddRaw(context, request, cq));
    }
    ::grpc::Status VectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::nnext::VectorGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorGetResponse>> AsyncVectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorGetResponse>>(AsyncVectorGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorGetResponse>> PrepareAsyncVectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorGetResponse>>(PrepareAsyncVectorGetRaw(context, request, cq));
    }
    ::grpc::Status VectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::nnext::VectorSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorSearchResponse>> AsyncVectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorSearchResponse>>(AsyncVectorSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorSearchResponse>> PrepareAsyncVectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorSearchResponse>>(PrepareAsyncVectorSearchRaw(context, request, cq));
    }
    ::grpc::Status VectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::nnext::VectorDeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorDeleteResponse>> AsyncVectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorDeleteResponse>>(AsyncVectorDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorDeleteResponse>> PrepareAsyncVectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorDeleteResponse>>(PrepareAsyncVectorDeleteRaw(context, request, cq));
    }
    ::grpc::Status VectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::nnext::VectorClearResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorClearResponse>> AsyncVectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorClearResponse>>(AsyncVectorClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorClearResponse>> PrepareAsyncVectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nnext::VectorClearResponse>>(PrepareAsyncVectorClearRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, std::function<void(::grpc::Status)>) override;
      void CreateIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest* request, ::nnext::ListIndicesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListIndices(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest* request, ::nnext::ListIndicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DropIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, std::function<void(::grpc::Status)>) override;
      void DropIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, std::function<void(::grpc::Status)>) override;
      void GetIndex(::grpc::ClientContext* context, const ::nnext::Index* request, ::nnext::Index* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest* request, ::nnext::VectorAddResponse* response, std::function<void(::grpc::Status)>) override;
      void VectorAdd(::grpc::ClientContext* context, const ::nnext::VectorAddRequest* request, ::nnext::VectorAddResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest* request, ::nnext::VectorGetResponse* response, std::function<void(::grpc::Status)>) override;
      void VectorGet(::grpc::ClientContext* context, const ::nnext::VectorGetRequest* request, ::nnext::VectorGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest* request, ::nnext::VectorSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void VectorSearch(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest* request, ::nnext::VectorSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest* request, ::nnext::VectorDeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void VectorDelete(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest* request, ::nnext::VectorDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest* request, ::nnext::VectorClearResponse* response, std::function<void(::grpc::Status)>) override;
      void VectorClear(::grpc::ClientContext* context, const ::nnext::VectorClearRequest* request, ::nnext::VectorClearResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nnext::Index>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::Index>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::ListIndicesResponse>* AsyncListIndicesRaw(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::ListIndicesResponse>* PrepareAsyncListIndicesRaw(::grpc::ClientContext* context, const ::nnext::ListIndicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::Index>* AsyncDropIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::Index>* PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::Index>* AsyncGetIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::Index>* PrepareAsyncGetIndexRaw(::grpc::ClientContext* context, const ::nnext::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorAddResponse>* AsyncVectorAddRaw(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorAddResponse>* PrepareAsyncVectorAddRaw(::grpc::ClientContext* context, const ::nnext::VectorAddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorGetResponse>* AsyncVectorGetRaw(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorGetResponse>* PrepareAsyncVectorGetRaw(::grpc::ClientContext* context, const ::nnext::VectorGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorSearchResponse>* AsyncVectorSearchRaw(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorSearchResponse>* PrepareAsyncVectorSearchRaw(::grpc::ClientContext* context, const ::nnext::VectorSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorDeleteResponse>* AsyncVectorDeleteRaw(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorDeleteResponse>* PrepareAsyncVectorDeleteRaw(::grpc::ClientContext* context, const ::nnext::VectorDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorClearResponse>* AsyncVectorClearRaw(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nnext::VectorClearResponse>* PrepareAsyncVectorClearRaw(::grpc::ClientContext* context, const ::nnext::VectorClearRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_ListIndices_;
    const ::grpc::internal::RpcMethod rpcmethod_DropIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_VectorAdd_;
    const ::grpc::internal::RpcMethod rpcmethod_VectorGet_;
    const ::grpc::internal::RpcMethod rpcmethod_VectorSearch_;
    const ::grpc::internal::RpcMethod rpcmethod_VectorDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_VectorClear_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateIndex(::grpc::ServerContext* context, const ::nnext::Index* request, ::nnext::Index* response);
    virtual ::grpc::Status ListIndices(::grpc::ServerContext* context, const ::nnext::ListIndicesRequest* request, ::nnext::ListIndicesResponse* response);
    virtual ::grpc::Status DropIndex(::grpc::ServerContext* context, const ::nnext::Index* request, ::nnext::Index* response);
    virtual ::grpc::Status GetIndex(::grpc::ServerContext* context, const ::nnext::Index* request, ::nnext::Index* response);
    virtual ::grpc::Status VectorAdd(::grpc::ServerContext* context, const ::nnext::VectorAddRequest* request, ::nnext::VectorAddResponse* response);
    virtual ::grpc::Status VectorGet(::grpc::ServerContext* context, const ::nnext::VectorGetRequest* request, ::nnext::VectorGetResponse* response);
    virtual ::grpc::Status VectorSearch(::grpc::ServerContext* context, const ::nnext::VectorSearchRequest* request, ::nnext::VectorSearchResponse* response);
    virtual ::grpc::Status VectorDelete(::grpc::ServerContext* context, const ::nnext::VectorDeleteRequest* request, ::nnext::VectorDeleteResponse* response);
    virtual ::grpc::Status VectorClear(::grpc::ServerContext* context, const ::nnext::VectorClearRequest* request, ::nnext::VectorClearResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateIndex() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIndex(::grpc::ServerContext* context, ::nnext::Index* request, ::grpc::ServerAsyncResponseWriter< ::nnext::Index>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListIndices() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndices(::grpc::ServerContext* /*context*/, const ::nnext::ListIndicesRequest* /*request*/, ::nnext::ListIndicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListIndices(::grpc::ServerContext* context, ::nnext::ListIndicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::nnext::ListIndicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropIndex() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropIndex(::grpc::ServerContext* context, ::nnext::Index* request, ::grpc::ServerAsyncResponseWriter< ::nnext::Index>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIndex() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndex(::grpc::ServerContext* context, ::nnext::Index* request, ::grpc::ServerAsyncResponseWriter< ::nnext::Index>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VectorAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VectorAdd() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_VectorAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorAdd(::grpc::ServerContext* /*context*/, const ::nnext::VectorAddRequest* /*request*/, ::nnext::VectorAddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorAdd(::grpc::ServerContext* context, ::nnext::VectorAddRequest* request, ::grpc::ServerAsyncResponseWriter< ::nnext::VectorAddResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VectorGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VectorGet() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_VectorGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorGet(::grpc::ServerContext* /*context*/, const ::nnext::VectorGetRequest* /*request*/, ::nnext::VectorGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorGet(::grpc::ServerContext* context, ::nnext::VectorGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::nnext::VectorGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VectorSearch() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::nnext::VectorSearchRequest* /*request*/, ::nnext::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorSearch(::grpc::ServerContext* context, ::nnext::VectorSearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::nnext::VectorSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VectorDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VectorDelete() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_VectorDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorDelete(::grpc::ServerContext* /*context*/, const ::nnext::VectorDeleteRequest* /*request*/, ::nnext::VectorDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorDelete(::grpc::ServerContext* context, ::nnext::VectorDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::nnext::VectorDeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VectorClear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VectorClear() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_VectorClear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorClear(::grpc::ServerContext* /*context*/, const ::nnext::VectorClearRequest* /*request*/, ::nnext::VectorClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorClear(::grpc::ServerContext* context, ::nnext::VectorClearRequest* request, ::grpc::ServerAsyncResponseWriter< ::nnext::VectorClearResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateIndex<WithAsyncMethod_ListIndices<WithAsyncMethod_DropIndex<WithAsyncMethod_GetIndex<WithAsyncMethod_VectorAdd<WithAsyncMethod_VectorGet<WithAsyncMethod_VectorSearch<WithAsyncMethod_VectorDelete<WithAsyncMethod_VectorClear<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateIndex() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::nnext::Index, ::nnext::Index>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nnext::Index* request, ::nnext::Index* response) { return this->CreateIndex(context, request, response); }));}
    void SetMessageAllocatorFor_CreateIndex(
        ::grpc::MessageAllocator< ::nnext::Index, ::nnext::Index>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nnext::Index, ::nnext::Index>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListIndices() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::nnext::ListIndicesRequest, ::nnext::ListIndicesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nnext::ListIndicesRequest* request, ::nnext::ListIndicesResponse* response) { return this->ListIndices(context, request, response); }));}
    void SetMessageAllocatorFor_ListIndices(
        ::grpc::MessageAllocator< ::nnext::ListIndicesRequest, ::nnext::ListIndicesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nnext::ListIndicesRequest, ::nnext::ListIndicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndices(::grpc::ServerContext* /*context*/, const ::nnext::ListIndicesRequest* /*request*/, ::nnext::ListIndicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListIndices(
      ::grpc::CallbackServerContext* /*context*/, const ::nnext::ListIndicesRequest* /*request*/, ::nnext::ListIndicesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DropIndex() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::nnext::Index, ::nnext::Index>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nnext::Index* request, ::nnext::Index* response) { return this->DropIndex(context, request, response); }));}
    void SetMessageAllocatorFor_DropIndex(
        ::grpc::MessageAllocator< ::nnext::Index, ::nnext::Index>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nnext::Index, ::nnext::Index>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DropIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIndex() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::nnext::Index, ::nnext::Index>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nnext::Index* request, ::nnext::Index* response) { return this->GetIndex(context, request, response); }));}
    void SetMessageAllocatorFor_GetIndex(
        ::grpc::MessageAllocator< ::nnext::Index, ::nnext::Index>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nnext::Index, ::nnext::Index>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VectorAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VectorAdd() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::nnext::VectorAddRequest, ::nnext::VectorAddResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nnext::VectorAddRequest* request, ::nnext::VectorAddResponse* response) { return this->VectorAdd(context, request, response); }));}
    void SetMessageAllocatorFor_VectorAdd(
        ::grpc::MessageAllocator< ::nnext::VectorAddRequest, ::nnext::VectorAddResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nnext::VectorAddRequest, ::nnext::VectorAddResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VectorAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorAdd(::grpc::ServerContext* /*context*/, const ::nnext::VectorAddRequest* /*request*/, ::nnext::VectorAddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorAdd(
      ::grpc::CallbackServerContext* /*context*/, const ::nnext::VectorAddRequest* /*request*/, ::nnext::VectorAddResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VectorGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VectorGet() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::nnext::VectorGetRequest, ::nnext::VectorGetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nnext::VectorGetRequest* request, ::nnext::VectorGetResponse* response) { return this->VectorGet(context, request, response); }));}
    void SetMessageAllocatorFor_VectorGet(
        ::grpc::MessageAllocator< ::nnext::VectorGetRequest, ::nnext::VectorGetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nnext::VectorGetRequest, ::nnext::VectorGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VectorGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorGet(::grpc::ServerContext* /*context*/, const ::nnext::VectorGetRequest* /*request*/, ::nnext::VectorGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorGet(
      ::grpc::CallbackServerContext* /*context*/, const ::nnext::VectorGetRequest* /*request*/, ::nnext::VectorGetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VectorSearch() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::nnext::VectorSearchRequest, ::nnext::VectorSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nnext::VectorSearchRequest* request, ::nnext::VectorSearchResponse* response) { return this->VectorSearch(context, request, response); }));}
    void SetMessageAllocatorFor_VectorSearch(
        ::grpc::MessageAllocator< ::nnext::VectorSearchRequest, ::nnext::VectorSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nnext::VectorSearchRequest, ::nnext::VectorSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::nnext::VectorSearchRequest* /*request*/, ::nnext::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::nnext::VectorSearchRequest* /*request*/, ::nnext::VectorSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VectorDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VectorDelete() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::nnext::VectorDeleteRequest, ::nnext::VectorDeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nnext::VectorDeleteRequest* request, ::nnext::VectorDeleteResponse* response) { return this->VectorDelete(context, request, response); }));}
    void SetMessageAllocatorFor_VectorDelete(
        ::grpc::MessageAllocator< ::nnext::VectorDeleteRequest, ::nnext::VectorDeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nnext::VectorDeleteRequest, ::nnext::VectorDeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VectorDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorDelete(::grpc::ServerContext* /*context*/, const ::nnext::VectorDeleteRequest* /*request*/, ::nnext::VectorDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::nnext::VectorDeleteRequest* /*request*/, ::nnext::VectorDeleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VectorClear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VectorClear() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::nnext::VectorClearRequest, ::nnext::VectorClearResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nnext::VectorClearRequest* request, ::nnext::VectorClearResponse* response) { return this->VectorClear(context, request, response); }));}
    void SetMessageAllocatorFor_VectorClear(
        ::grpc::MessageAllocator< ::nnext::VectorClearRequest, ::nnext::VectorClearResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nnext::VectorClearRequest, ::nnext::VectorClearResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VectorClear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorClear(::grpc::ServerContext* /*context*/, const ::nnext::VectorClearRequest* /*request*/, ::nnext::VectorClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorClear(
      ::grpc::CallbackServerContext* /*context*/, const ::nnext::VectorClearRequest* /*request*/, ::nnext::VectorClearResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateIndex<WithCallbackMethod_ListIndices<WithCallbackMethod_DropIndex<WithCallbackMethod_GetIndex<WithCallbackMethod_VectorAdd<WithCallbackMethod_VectorGet<WithCallbackMethod_VectorSearch<WithCallbackMethod_VectorDelete<WithCallbackMethod_VectorClear<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateIndex() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListIndices() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndices(::grpc::ServerContext* /*context*/, const ::nnext::ListIndicesRequest* /*request*/, ::nnext::ListIndicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropIndex() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIndex() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VectorAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VectorAdd() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_VectorAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorAdd(::grpc::ServerContext* /*context*/, const ::nnext::VectorAddRequest* /*request*/, ::nnext::VectorAddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VectorGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VectorGet() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_VectorGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorGet(::grpc::ServerContext* /*context*/, const ::nnext::VectorGetRequest* /*request*/, ::nnext::VectorGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VectorSearch() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::nnext::VectorSearchRequest* /*request*/, ::nnext::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VectorDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VectorDelete() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_VectorDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorDelete(::grpc::ServerContext* /*context*/, const ::nnext::VectorDeleteRequest* /*request*/, ::nnext::VectorDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VectorClear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VectorClear() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_VectorClear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorClear(::grpc::ServerContext* /*context*/, const ::nnext::VectorClearRequest* /*request*/, ::nnext::VectorClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateIndex() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListIndices() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndices(::grpc::ServerContext* /*context*/, const ::nnext::ListIndicesRequest* /*request*/, ::nnext::ListIndicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListIndices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropIndex() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIndex() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VectorAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VectorAdd() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_VectorAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorAdd(::grpc::ServerContext* /*context*/, const ::nnext::VectorAddRequest* /*request*/, ::nnext::VectorAddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VectorGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VectorGet() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_VectorGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorGet(::grpc::ServerContext* /*context*/, const ::nnext::VectorGetRequest* /*request*/, ::nnext::VectorGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VectorSearch() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::nnext::VectorSearchRequest* /*request*/, ::nnext::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VectorDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VectorDelete() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_VectorDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorDelete(::grpc::ServerContext* /*context*/, const ::nnext::VectorDeleteRequest* /*request*/, ::nnext::VectorDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VectorClear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VectorClear() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_VectorClear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorClear(::grpc::ServerContext* /*context*/, const ::nnext::VectorClearRequest* /*request*/, ::nnext::VectorClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVectorClear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateIndex() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListIndices() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListIndices(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndices(::grpc::ServerContext* /*context*/, const ::nnext::ListIndicesRequest* /*request*/, ::nnext::ListIndicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListIndices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DropIndex() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DropIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DropIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIndex() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VectorAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VectorAdd() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VectorAdd(context, request, response); }));
    }
    ~WithRawCallbackMethod_VectorAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorAdd(::grpc::ServerContext* /*context*/, const ::nnext::VectorAddRequest* /*request*/, ::nnext::VectorAddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorAdd(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VectorGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VectorGet() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VectorGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_VectorGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorGet(::grpc::ServerContext* /*context*/, const ::nnext::VectorGetRequest* /*request*/, ::nnext::VectorGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VectorSearch() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VectorSearch(context, request, response); }));
    }
    ~WithRawCallbackMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::nnext::VectorSearchRequest* /*request*/, ::nnext::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VectorDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VectorDelete() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VectorDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_VectorDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorDelete(::grpc::ServerContext* /*context*/, const ::nnext::VectorDeleteRequest* /*request*/, ::nnext::VectorDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VectorClear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VectorClear() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VectorClear(context, request, response); }));
    }
    ~WithRawCallbackMethod_VectorClear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VectorClear(::grpc::ServerContext* /*context*/, const ::nnext::VectorClearRequest* /*request*/, ::nnext::VectorClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VectorClear(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateIndex() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nnext::Index, ::nnext::Index>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nnext::Index, ::nnext::Index>* streamer) {
                       return this->StreamedCreateIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nnext::Index,::nnext::Index>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListIndices() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nnext::ListIndicesRequest, ::nnext::ListIndicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nnext::ListIndicesRequest, ::nnext::ListIndicesResponse>* streamer) {
                       return this->StreamedListIndices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListIndices(::grpc::ServerContext* /*context*/, const ::nnext::ListIndicesRequest* /*request*/, ::nnext::ListIndicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListIndices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nnext::ListIndicesRequest,::nnext::ListIndicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropIndex() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nnext::Index, ::nnext::Index>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nnext::Index, ::nnext::Index>* streamer) {
                       return this->StreamedDropIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nnext::Index,::nnext::Index>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIndex() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nnext::Index, ::nnext::Index>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nnext::Index, ::nnext::Index>* streamer) {
                       return this->StreamedGetIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::nnext::Index* /*request*/, ::nnext::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nnext::Index,::nnext::Index>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VectorAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VectorAdd() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nnext::VectorAddRequest, ::nnext::VectorAddResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nnext::VectorAddRequest, ::nnext::VectorAddResponse>* streamer) {
                       return this->StreamedVectorAdd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VectorAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VectorAdd(::grpc::ServerContext* /*context*/, const ::nnext::VectorAddRequest* /*request*/, ::nnext::VectorAddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVectorAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nnext::VectorAddRequest,::nnext::VectorAddResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VectorGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VectorGet() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nnext::VectorGetRequest, ::nnext::VectorGetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nnext::VectorGetRequest, ::nnext::VectorGetResponse>* streamer) {
                       return this->StreamedVectorGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VectorGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VectorGet(::grpc::ServerContext* /*context*/, const ::nnext::VectorGetRequest* /*request*/, ::nnext::VectorGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVectorGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nnext::VectorGetRequest,::nnext::VectorGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VectorSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VectorSearch() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nnext::VectorSearchRequest, ::nnext::VectorSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nnext::VectorSearchRequest, ::nnext::VectorSearchResponse>* streamer) {
                       return this->StreamedVectorSearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VectorSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VectorSearch(::grpc::ServerContext* /*context*/, const ::nnext::VectorSearchRequest* /*request*/, ::nnext::VectorSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVectorSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nnext::VectorSearchRequest,::nnext::VectorSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VectorDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VectorDelete() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nnext::VectorDeleteRequest, ::nnext::VectorDeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nnext::VectorDeleteRequest, ::nnext::VectorDeleteResponse>* streamer) {
                       return this->StreamedVectorDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VectorDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VectorDelete(::grpc::ServerContext* /*context*/, const ::nnext::VectorDeleteRequest* /*request*/, ::nnext::VectorDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVectorDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nnext::VectorDeleteRequest,::nnext::VectorDeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VectorClear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VectorClear() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nnext::VectorClearRequest, ::nnext::VectorClearResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nnext::VectorClearRequest, ::nnext::VectorClearResponse>* streamer) {
                       return this->StreamedVectorClear(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VectorClear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VectorClear(::grpc::ServerContext* /*context*/, const ::nnext::VectorClearRequest* /*request*/, ::nnext::VectorClearResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVectorClear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nnext::VectorClearRequest,::nnext::VectorClearResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_ListIndices<WithStreamedUnaryMethod_DropIndex<WithStreamedUnaryMethod_GetIndex<WithStreamedUnaryMethod_VectorAdd<WithStreamedUnaryMethod_VectorGet<WithStreamedUnaryMethod_VectorSearch<WithStreamedUnaryMethod_VectorDelete<WithStreamedUnaryMethod_VectorClear<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_ListIndices<WithStreamedUnaryMethod_DropIndex<WithStreamedUnaryMethod_GetIndex<WithStreamedUnaryMethod_VectorAdd<WithStreamedUnaryMethod_VectorGet<WithStreamedUnaryMethod_VectorSearch<WithStreamedUnaryMethod_VectorDelete<WithStreamedUnaryMethod_VectorClear<Service > > > > > > > > > StreamedService;
};

}  // namespace nnext


#endif  // GRPC_main_2eproto__INCLUDED
