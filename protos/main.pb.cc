// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#include "main.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace nnext {
constexpr Metadata::Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , _oneof_case_{}{}
struct MetadataDefaultTypeInternal {
  constexpr MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataDefaultTypeInternal _Metadata_default_instance_;
constexpr SchemaItem::SchemaItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , is_primary_(false)
  , is_indexed_(false){}
struct SchemaItemDefaultTypeInternal {
  constexpr SchemaItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaItemDefaultTypeInternal() {}
  union {
    SchemaItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaItemDefaultTypeInternal _SchemaItem_default_instance_;
constexpr Schema_SchemaMapEntry_DoNotUse::Schema_SchemaMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Schema_SchemaMapEntry_DoNotUseDefaultTypeInternal {
  constexpr Schema_SchemaMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Schema_SchemaMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Schema_SchemaMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Schema_SchemaMapEntry_DoNotUseDefaultTypeInternal _Schema_SchemaMapEntry_DoNotUse_default_instance_;
constexpr Schema::Schema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schema_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , rptd__schema_item_(){}
struct SchemaDefaultTypeInternal {
  constexpr SchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaDefaultTypeInternal() {}
  union {
    Schema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaDefaultTypeInternal _Schema_default_instance_;
constexpr Datum::Datum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rptd__vector_()
  , rptd__metadata_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DatumDefaultTypeInternal {
  constexpr DatumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatumDefaultTypeInternal() {}
  union {
    Datum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatumDefaultTypeInternal _Datum_default_instance_;
constexpr DataList::DataList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct DataListDefaultTypeInternal {
  constexpr DataListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataListDefaultTypeInternal() {}
  union {
    DataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataListDefaultTypeInternal _DataList_default_instance_;
constexpr Vector::Vector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rptd__element_(){}
struct VectorDefaultTypeInternal {
  constexpr VectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorDefaultTypeInternal _Vector_default_instance_;
constexpr VectorList::VectorList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rptd__vector_(){}
struct VectorListDefaultTypeInternal {
  constexpr VectorListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorListDefaultTypeInternal() {}
  union {
    VectorList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorListDefaultTypeInternal _VectorList_default_instance_;
constexpr Index::Index(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schema_(nullptr)
  , dims_(0u)
  , index_type_(0)

  , metric_(0)

  , is_trained_(false)
  , ntotal_(uint64_t{0u}){}
struct IndexDefaultTypeInternal {
  constexpr IndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexDefaultTypeInternal() {}
  union {
    Index _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexDefaultTypeInternal _Index_default_instance_;
constexpr IndexList::IndexList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : indices_(){}
struct IndexListDefaultTypeInternal {
  constexpr IndexListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexListDefaultTypeInternal() {}
  union {
    IndexList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexListDefaultTypeInternal _IndexList_default_instance_;
constexpr IndexMap_IndicesEntry_DoNotUse::IndexMap_IndicesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IndexMap_IndicesEntry_DoNotUseDefaultTypeInternal {
  constexpr IndexMap_IndicesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexMap_IndicesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    IndexMap_IndicesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexMap_IndicesEntry_DoNotUseDefaultTypeInternal _IndexMap_IndicesEntry_DoNotUse_default_instance_;
constexpr IndexMap::IndexMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : indices_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct IndexMapDefaultTypeInternal {
  constexpr IndexMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexMapDefaultTypeInternal() {}
  union {
    IndexMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexMapDefaultTypeInternal _IndexMap_default_instance_;
constexpr IdMap_IdxEntry_DoNotUse::IdMap_IdxEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IdMap_IdxEntry_DoNotUseDefaultTypeInternal {
  constexpr IdMap_IdxEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdMap_IdxEntry_DoNotUseDefaultTypeInternal() {}
  union {
    IdMap_IdxEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdMap_IdxEntry_DoNotUseDefaultTypeInternal _IdMap_IdxEntry_DoNotUse_default_instance_;
constexpr IdMap_InvEntry_DoNotUse::IdMap_InvEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IdMap_InvEntry_DoNotUseDefaultTypeInternal {
  constexpr IdMap_InvEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdMap_InvEntry_DoNotUseDefaultTypeInternal() {}
  union {
    IdMap_InvEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdMap_InvEntry_DoNotUseDefaultTypeInternal _IdMap_InvEntry_DoNotUse_default_instance_;
constexpr IdMap::IdMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : idx_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , inv_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct IdMapDefaultTypeInternal {
  constexpr IdMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdMapDefaultTypeInternal() {}
  union {
    IdMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdMapDefaultTypeInternal _IdMap_default_instance_;
constexpr CreateIndexRequest::CreateIndexRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schema_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dims_(0)
  , index_type_(0)

  , metric_type_(0)
{}
struct CreateIndexRequestDefaultTypeInternal {
  constexpr CreateIndexRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateIndexRequestDefaultTypeInternal() {}
  union {
    CreateIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
constexpr CreateIndexResponse::CreateIndexResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(nullptr){}
struct CreateIndexResponseDefaultTypeInternal {
  constexpr CreateIndexResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateIndexResponseDefaultTypeInternal() {}
  union {
    CreateIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateIndexResponseDefaultTypeInternal _CreateIndexResponse_default_instance_;
constexpr ListIndicesRequest::ListIndicesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(0u)
  , size_(0u)
  , dims_(0u){}
struct ListIndicesRequestDefaultTypeInternal {
  constexpr ListIndicesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListIndicesRequestDefaultTypeInternal() {}
  union {
    ListIndicesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListIndicesRequestDefaultTypeInternal _ListIndicesRequest_default_instance_;
constexpr ListIndicesResponse::ListIndicesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : indices_()
  , total_(0u){}
struct ListIndicesResponseDefaultTypeInternal {
  constexpr ListIndicesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListIndicesResponseDefaultTypeInternal() {}
  union {
    ListIndicesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListIndicesResponseDefaultTypeInternal _ListIndicesResponse_default_instance_;
constexpr DropIndexRequest::DropIndexRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DropIndexRequestDefaultTypeInternal {
  constexpr DropIndexRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DropIndexRequestDefaultTypeInternal() {}
  union {
    DropIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DropIndexRequestDefaultTypeInternal _DropIndexRequest_default_instance_;
constexpr DropIndexResponse::DropIndexResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(nullptr){}
struct DropIndexResponseDefaultTypeInternal {
  constexpr DropIndexResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DropIndexResponseDefaultTypeInternal() {}
  union {
    DropIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DropIndexResponseDefaultTypeInternal _DropIndexResponse_default_instance_;
constexpr VectorAddRequest::VectorAddRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , index_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_cols_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_types_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VectorAddRequestDefaultTypeInternal {
  constexpr VectorAddRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorAddRequestDefaultTypeInternal() {}
  union {
    VectorAddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorAddRequestDefaultTypeInternal _VectorAddRequest_default_instance_;
constexpr VectorAddResponse::VectorAddResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , total_(uint64_t{0u}){}
struct VectorAddResponseDefaultTypeInternal {
  constexpr VectorAddResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorAddResponseDefaultTypeInternal() {}
  union {
    VectorAddResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorAddResponseDefaultTypeInternal _VectorAddResponse_default_instance_;
constexpr VectorSearchRequest::VectorSearchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rptd_query_vector_()
  , index_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , k_(0u)
  , omit_vector_(false)
  , omit_metadata_(false){}
struct VectorSearchRequestDefaultTypeInternal {
  constexpr VectorSearchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorSearchRequestDefaultTypeInternal() {}
  union {
    VectorSearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorSearchRequestDefaultTypeInternal _VectorSearchRequest_default_instance_;
constexpr VectorSearchResponse::VectorSearchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rptd__datum_()
  , page_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ntotal_(uint64_t{0u}){}
struct VectorSearchResponseDefaultTypeInternal {
  constexpr VectorSearchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorSearchResponseDefaultTypeInternal() {}
  union {
    VectorSearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorSearchResponseDefaultTypeInternal _VectorSearchResponse_default_instance_;
constexpr VectorGetRequest::VectorGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , index_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VectorGetRequestDefaultTypeInternal {
  constexpr VectorGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorGetRequestDefaultTypeInternal() {}
  union {
    VectorGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorGetRequestDefaultTypeInternal _VectorGetRequest_default_instance_;
constexpr VectorGetResponse::VectorGetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct VectorGetResponseDefaultTypeInternal {
  constexpr VectorGetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorGetResponseDefaultTypeInternal() {}
  union {
    VectorGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorGetResponseDefaultTypeInternal _VectorGetResponse_default_instance_;
constexpr VectorDeleteRequest::VectorDeleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct VectorDeleteRequestDefaultTypeInternal {
  constexpr VectorDeleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorDeleteRequestDefaultTypeInternal() {}
  union {
    VectorDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorDeleteRequestDefaultTypeInternal _VectorDeleteRequest_default_instance_;
constexpr VectorDeleteResponse::VectorDeleteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct VectorDeleteResponseDefaultTypeInternal {
  constexpr VectorDeleteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorDeleteResponseDefaultTypeInternal() {}
  union {
    VectorDeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorDeleteResponseDefaultTypeInternal _VectorDeleteResponse_default_instance_;
constexpr VectorClearRequest::VectorClearRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct VectorClearRequestDefaultTypeInternal {
  constexpr VectorClearRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorClearRequestDefaultTypeInternal() {}
  union {
    VectorClearRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorClearRequestDefaultTypeInternal _VectorClearRequest_default_instance_;
constexpr VectorClearResponse::VectorClearResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct VectorClearResponseDefaultTypeInternal {
  constexpr VectorClearResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorClearResponseDefaultTypeInternal() {}
  union {
    VectorClearResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorClearResponseDefaultTypeInternal _VectorClearResponse_default_instance_;
}  // namespace nnext
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_main_2eproto[31];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_main_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_main_2eproto = nullptr;

const uint32_t TableStruct_main_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nnext::Metadata, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nnext::Metadata, name_),
  PROTOBUF_FIELD_OFFSET(::nnext::Metadata, type_),
  PROTOBUF_FIELD_OFFSET(::nnext::Metadata, metafield_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::SchemaItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::SchemaItem, type_),
  PROTOBUF_FIELD_OFFSET(::nnext::SchemaItem, is_primary_),
  PROTOBUF_FIELD_OFFSET(::nnext::SchemaItem, is_indexed_),
  PROTOBUF_FIELD_OFFSET(::nnext::SchemaItem, name_),
  PROTOBUF_FIELD_OFFSET(::nnext::Schema_SchemaMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nnext::Schema_SchemaMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::Schema_SchemaMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nnext::Schema_SchemaMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::Schema, schema_map_),
  PROTOBUF_FIELD_OFFSET(::nnext::Schema, rptd__schema_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::Datum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::Datum, id_),
  PROTOBUF_FIELD_OFFSET(::nnext::Datum, rptd__vector_),
  PROTOBUF_FIELD_OFFSET(::nnext::Datum, rptd__metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::DataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::DataList, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::Vector, rptd__element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorList, rptd__vector_),
  PROTOBUF_FIELD_OFFSET(::nnext::Index, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nnext::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::Index, name_),
  PROTOBUF_FIELD_OFFSET(::nnext::Index, dims_),
  PROTOBUF_FIELD_OFFSET(::nnext::Index, index_type_),
  PROTOBUF_FIELD_OFFSET(::nnext::Index, metric_),
  PROTOBUF_FIELD_OFFSET(::nnext::Index, is_trained_),
  PROTOBUF_FIELD_OFFSET(::nnext::Index, ntotal_),
  PROTOBUF_FIELD_OFFSET(::nnext::Index, schema_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::IndexList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::IndexList, indices_),
  PROTOBUF_FIELD_OFFSET(::nnext::IndexMap_IndicesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nnext::IndexMap_IndicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::IndexMap_IndicesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nnext::IndexMap_IndicesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::IndexMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::IndexMap, indices_),
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap_IdxEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap_IdxEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap_IdxEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap_IdxEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap_InvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap_InvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap_InvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap_InvEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap, idx_),
  PROTOBUF_FIELD_OFFSET(::nnext::IdMap, inv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::CreateIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::CreateIndexRequest, name_),
  PROTOBUF_FIELD_OFFSET(::nnext::CreateIndexRequest, dims_),
  PROTOBUF_FIELD_OFFSET(::nnext::CreateIndexRequest, index_type_),
  PROTOBUF_FIELD_OFFSET(::nnext::CreateIndexRequest, metric_type_),
  PROTOBUF_FIELD_OFFSET(::nnext::CreateIndexRequest, schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::CreateIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::CreateIndexResponse, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::ListIndicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::ListIndicesRequest, pattern_),
  PROTOBUF_FIELD_OFFSET(::nnext::ListIndicesRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::nnext::ListIndicesRequest, size_),
  PROTOBUF_FIELD_OFFSET(::nnext::ListIndicesRequest, dims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::ListIndicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::ListIndicesResponse, indices_),
  PROTOBUF_FIELD_OFFSET(::nnext::ListIndicesResponse, total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::DropIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::DropIndexRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::DropIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::DropIndexResponse, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorAddRequest, index_name_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorAddRequest, header_cols_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorAddRequest, header_types_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorAddRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorAddResponse, data_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorAddResponse, total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchRequest, index_name_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchRequest, rptd_query_vector_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchRequest, k_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchRequest, omit_vector_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchRequest, omit_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchResponse, page_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchResponse, ntotal_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorSearchResponse, rptd__datum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorGetRequest, data_),
  PROTOBUF_FIELD_OFFSET(::nnext::VectorGetRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorGetResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorDeleteRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorDeleteResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorClearRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorClearRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorClearResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nnext::VectorClearResponse, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::nnext::Metadata)},
  { 24, -1, -1, sizeof(::nnext::SchemaItem)},
  { 34, 42, -1, sizeof(::nnext::Schema_SchemaMapEntry_DoNotUse)},
  { 44, -1, -1, sizeof(::nnext::Schema)},
  { 52, -1, -1, sizeof(::nnext::Datum)},
  { 61, -1, -1, sizeof(::nnext::DataList)},
  { 68, -1, -1, sizeof(::nnext::Vector)},
  { 75, -1, -1, sizeof(::nnext::VectorList)},
  { 82, 95, -1, sizeof(::nnext::Index)},
  { 102, -1, -1, sizeof(::nnext::IndexList)},
  { 109, 117, -1, sizeof(::nnext::IndexMap_IndicesEntry_DoNotUse)},
  { 119, -1, -1, sizeof(::nnext::IndexMap)},
  { 126, 134, -1, sizeof(::nnext::IdMap_IdxEntry_DoNotUse)},
  { 136, 144, -1, sizeof(::nnext::IdMap_InvEntry_DoNotUse)},
  { 146, -1, -1, sizeof(::nnext::IdMap)},
  { 154, -1, -1, sizeof(::nnext::CreateIndexRequest)},
  { 165, -1, -1, sizeof(::nnext::CreateIndexResponse)},
  { 172, -1, -1, sizeof(::nnext::ListIndicesRequest)},
  { 182, -1, -1, sizeof(::nnext::ListIndicesResponse)},
  { 190, -1, -1, sizeof(::nnext::DropIndexRequest)},
  { 197, -1, -1, sizeof(::nnext::DropIndexResponse)},
  { 204, -1, -1, sizeof(::nnext::VectorAddRequest)},
  { 214, -1, -1, sizeof(::nnext::VectorAddResponse)},
  { 222, -1, -1, sizeof(::nnext::VectorSearchRequest)},
  { 234, -1, -1, sizeof(::nnext::VectorSearchResponse)},
  { 243, -1, -1, sizeof(::nnext::VectorGetRequest)},
  { 251, -1, -1, sizeof(::nnext::VectorGetResponse)},
  { 258, -1, -1, sizeof(::nnext::VectorDeleteRequest)},
  { 265, -1, -1, sizeof(::nnext::VectorDeleteResponse)},
  { 272, -1, -1, sizeof(::nnext::VectorClearRequest)},
  { 279, -1, -1, sizeof(::nnext::VectorClearResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_SchemaItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_Schema_SchemaMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_Schema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_Datum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_DataList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_Vector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_Index_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_IndexList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_IndexMap_IndicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_IndexMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_IdMap_IdxEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_IdMap_InvEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_IdMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_CreateIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_CreateIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_ListIndicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_ListIndicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_DropIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_DropIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorAddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorAddResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorSearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorClearRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nnext::_VectorClearResponse_default_instance_),
};

const char descriptor_table_protodef_main_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nmain.proto\022\005nnext\"\341\002\n\010Metadata\022\021\n\007_dou"
  "ble\030\001 \001(\001H\000\022\020\n\006_float\030\002 \001(\002H\000\022\020\n\006_int32\030"
  "\003 \001(\005H\000\022\020\n\006_int64\030\004 \001(\003H\000\022\021\n\007_uint32\030\005 \001"
  "(\rH\000\022\021\n\007_uint64\030\006 \001(\004H\000\022\021\n\007_sint32\030\007 \001(\021"
  "H\000\022\021\n\007_sint64\030\010 \001(\022H\000\022\022\n\010_fixed32\030\t \001(\007H"
  "\000\022\022\n\010_fixed64\030\n \001(\006H\000\022\023\n\t_sfixed32\030\013 \001(\017"
  "H\000\022\023\n\t_sfixed64\030\014 \001(\020H\000\022\017\n\005_bool\030\r \001(\010H\000"
  "\022\021\n\007_string\030\016 \001(\tH\000\022\020\n\006_bytes\030\017 \001(\014H\000\022\014\n"
  "\004name\030\020 \001(\t\022\035\n\004type\030\021 \001(\0162\017.nnext.DataTy"
  "peB\013\n\tmetafield\"a\n\nSchemaItem\022\035\n\004type\030\001 "
  "\001(\0162\017.nnext.DataType\022\022\n\nis_primary\030\002 \001(\010"
  "\022\022\n\nis_indexed\030\003 \001(\010\022\014\n\004name\030\004 \001(\t\"\255\001\n\006S"
  "chema\0220\n\nschema_map\030\001 \003(\0132\034.nnext.Schema"
  ".SchemaMapEntry\022,\n\021rptd__schema_item\030\002 \003"
  "(\0132\021.nnext.SchemaItem\032C\n\016SchemaMapEntry\022"
  "\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.nnext.Sche"
  "maItem:\0028\001\"R\n\005Datum\022\n\n\002id\030\001 \001(\t\022\024\n\014rptd_"
  "_vector\030\002 \003(\002\022\'\n\016rptd__metadata\030\003 \003(\0132\017."
  "nnext.Metadata\"\030\n\010DataList\022\014\n\004data\030\001 \003(\002"
  "\"\037\n\006Vector\022\025\n\rrptd__element\030\001 \003(\002\"1\n\nVec"
  "torList\022#\n\014rptd__vector\030\001 \003(\0132\r.nnext.Ve"
  "ctor\"\323\001\n\005Index\022\014\n\004name\030\001 \001(\t\022\014\n\004dims\030\002 \001"
  "(\r\022)\n\nindex_type\030\003 \001(\0162\020.nnext.IndexType"
  "H\000\210\001\001\022&\n\006metric\030\004 \001(\0162\021.nnext.MetricType"
  "H\001\210\001\001\022\022\n\nis_trained\030\005 \001(\010\022\016\n\006ntotal\030\006 \001("
  "\004\022\035\n\006schema\030\007 \001(\0132\r.nnext.SchemaB\r\n\013_ind"
  "ex_typeB\t\n\007_metric\"*\n\tIndexList\022\035\n\007indic"
  "es\030\001 \003(\0132\014.nnext.Index\"w\n\010IndexMap\022-\n\007in"
  "dices\030\001 \003(\0132\034.nnext.IndexMap.IndicesEntr"
  "y\032<\n\014IndicesEntry\022\013\n\003key\030\001 \001(\t\022\033\n\005value\030"
  "\002 \001(\0132\014.nnext.Index:\0028\001\"\247\001\n\005IdMap\022\"\n\003idx"
  "\030\001 \003(\0132\025.nnext.IdMap.IdxEntry\022\"\n\003inv\030\002 \003"
  "(\0132\025.nnext.IdMap.InvEntry\032*\n\010IdxEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032*\n\010InvEntr"
  "y\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\t:\0028\001\"\216\001\n\022Cr"
  "eateIndexRequest\022\014\n\004name\030\001 \001(\t\022\014\n\004dims\030\002"
  " \001(\005\022$\n\nindex_type\030\003 \001(\0162\020.nnext.IndexTy"
  "pe\022&\n\013metric_type\030\004 \001(\0162\021.nnext.MetricTy"
  "pe\022\016\n\006schema\030\005 \001(\t\"2\n\023CreateIndexRespons"
  "e\022\033\n\005index\030\001 \001(\0132\014.nnext.Index\"Q\n\022ListIn"
  "dicesRequest\022\017\n\007pattern\030\001 \001(\t\022\016\n\006offset\030"
  "\002 \001(\r\022\014\n\004size\030\003 \001(\r\022\014\n\004dims\030\004 \001(\r\"C\n\023Lis"
  "tIndicesResponse\022\035\n\007indices\030\001 \003(\0132\014.nnex"
  "t.Index\022\r\n\005total\030\002 \001(\r\" \n\020DropIndexReque"
  "st\022\014\n\004name\030\001 \001(\t\"0\n\021DropIndexResponse\022\033\n"
  "\005index\030\001 \001(\0132\014.nnext.Index\"m\n\020VectorAddR"
  "equest\022\022\n\nindex_name\030\001 \001(\t\022\023\n\013header_col"
  "s\030\002 \001(\t\022\024\n\014header_types\030\003 \001(\t\022\032\n\004data\030\004 "
  "\003(\0132\014.nnext.Datum\">\n\021VectorAddResponse\022\032"
  "\n\004data\030\001 \003(\0132\014.nnext.Datum\022\r\n\005total\030\002 \001("
  "\004\"\233\001\n\023VectorSearchRequest\022\022\n\nindex_name\030"
  "\001 \001(\t\022(\n\021rptd_query_vector\030\002 \003(\0132\r.nnext"
  ".Vector\022\t\n\001k\030\003 \001(\r\022\017\n\007filters\030\004 \001(\t\022\023\n\013o"
  "mit_vector\030\005 \001(\010\022\025\n\romit_metadata\030\006 \001(\010\""
  "W\n\024VectorSearchResponse\022\014\n\004page\030\001 \001(\t\022\016\n"
  "\006ntotal\030\002 \001(\004\022!\n\013rptd__datum\030\003 \003(\0132\014.nne"
  "xt.Datum\"B\n\020VectorGetRequest\022\032\n\004data\030\001 \003"
  "(\0132\014.nnext.Datum\022\022\n\nindex_name\030\002 \001(\t\"/\n\021"
  "VectorGetResponse\022\032\n\004data\030\002 \003(\0132\014.nnext."
  "Datum\"1\n\023VectorDeleteRequest\022\032\n\004data\030\001 \003"
  "(\0132\014.nnext.Datum\"2\n\024VectorDeleteResponse"
  "\022\032\n\004data\030\002 \003(\0132\014.nnext.Datum\"0\n\022VectorCl"
  "earRequest\022\032\n\004data\030\001 \003(\0132\014.nnext.Datum\"1"
  "\n\023VectorClearResponse\022\032\n\004data\030\002 \003(\0132\014.nn"
  "ext.Datum*(\n\tIndexType\022\020\n\014APPROXIMATED\020\000"
  "\022\t\n\005EXACT\020\001*9\n\nMetricType\022\r\n\tEUCLIDEAN\020\000"
  "\022\r\n\tMANHATTAN\020\001\022\r\n\tCHEBYSHEV\020\002*E\n\010DataTy"
  "pe\022\013\n\007unknown\020\000\022\n\n\006double\020\001\022\t\n\005float\020\002\022\t"
  "\n\005int32\020\003\022\n\n\006string\020\0042\263\004\n\005NNext\022+\n\013Creat"
  "eIndex\022\014.nnext.Index\032\014.nnext.Index\"\000\022F\n\013"
  "ListIndices\022\031.nnext.ListIndicesRequest\032\032"
  ".nnext.ListIndicesResponse\"\000\022)\n\tDropInde"
  "x\022\014.nnext.Index\032\014.nnext.Index\"\000\022(\n\010GetIn"
  "dex\022\014.nnext.Index\032\014.nnext.Index\"\000\022@\n\tVec"
  "torAdd\022\027.nnext.VectorAddRequest\032\030.nnext."
  "VectorAddResponse\"\000\022@\n\tVectorGet\022\027.nnext"
  ".VectorGetRequest\032\030.nnext.VectorGetRespo"
  "nse\"\000\022I\n\014VectorSearch\022\032.nnext.VectorSear"
  "chRequest\032\033.nnext.VectorSearchResponse\"\000"
  "\022I\n\014VectorDelete\022\032.nnext.VectorDeleteReq"
  "uest\032\033.nnext.VectorDeleteResponse\"\000\022F\n\013V"
  "ectorClear\022\031.nnext.VectorClearRequest\032\032."
  "nnext.VectorClearResponse\"\000B)\n\rai.nnext."
  "mainB\016NNextMainProtoP\001\242\002\005NNextb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_main_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_main_2eproto = {
  false, false, 3358, descriptor_table_protodef_main_2eproto, "main.proto", 
  &descriptor_table_main_2eproto_once, nullptr, 0, 31,
  schemas, file_default_instances, TableStruct_main_2eproto::offsets,
  file_level_metadata_main_2eproto, file_level_enum_descriptors_main_2eproto, file_level_service_descriptors_main_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_main_2eproto_getter() {
  return &descriptor_table_main_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_main_2eproto(&descriptor_table_main_2eproto);
namespace nnext {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_main_2eproto);
  return file_level_enum_descriptors_main_2eproto[0];
}
bool IndexType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_main_2eproto);
  return file_level_enum_descriptors_main_2eproto[1];
}
bool MetricType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_main_2eproto);
  return file_level_enum_descriptors_main_2eproto[2];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  clear_has_metafield();
  switch (from.metafield_case()) {
    case kDouble: {
      _internal_set__double(from._internal__double());
      break;
    }
    case kFloat: {
      _internal_set__float(from._internal__float());
      break;
    }
    case kInt32: {
      _internal_set__int32(from._internal__int32());
      break;
    }
    case kInt64: {
      _internal_set__int64(from._internal__int64());
      break;
    }
    case kUint32: {
      _internal_set__uint32(from._internal__uint32());
      break;
    }
    case kUint64: {
      _internal_set__uint64(from._internal__uint64());
      break;
    }
    case kSint32: {
      _internal_set__sint32(from._internal__sint32());
      break;
    }
    case kSint64: {
      _internal_set__sint64(from._internal__sint64());
      break;
    }
    case kFixed32: {
      _internal_set__fixed32(from._internal__fixed32());
      break;
    }
    case kFixed64: {
      _internal_set__fixed64(from._internal__fixed64());
      break;
    }
    case kSfixed32: {
      _internal_set__sfixed32(from._internal__sfixed32());
      break;
    }
    case kSfixed64: {
      _internal_set__sfixed64(from._internal__sfixed64());
      break;
    }
    case kBool: {
      _internal_set__bool(from._internal__bool());
      break;
    }
    case kString: {
      _internal_set__string(from._internal__string());
      break;
    }
    case kBytes: {
      _internal_set__bytes(from._internal__bytes());
      break;
    }
    case METAFIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nnext.Metadata)
}

inline void Metadata::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
clear_has_metafield();
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:nnext.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_metafield()) {
    clear_metafield();
  }
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
}
void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::clear_metafield() {
// @@protoc_insertion_point(one_of_clear_start:nnext.Metadata)
  switch (metafield_case()) {
    case kDouble: {
      // No need to clear
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kInt32: {
      // No need to clear
      break;
    }
    case kInt64: {
      // No need to clear
      break;
    }
    case kUint32: {
      // No need to clear
      break;
    }
    case kUint64: {
      // No need to clear
      break;
    }
    case kSint32: {
      // No need to clear
      break;
    }
    case kSint64: {
      // No need to clear
      break;
    }
    case kFixed32: {
      // No need to clear
      break;
    }
    case kFixed64: {
      // No need to clear
      break;
    }
    case kSfixed32: {
      // No need to clear
      break;
    }
    case kSfixed64: {
      // No need to clear
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kString: {
      metafield_._string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kBytes: {
      metafield_._bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case METAFIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METAFIELD_NOT_SET;
}


void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_ = 0;
  clear_metafield();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double _double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _internal_set__double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float _float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _internal_set__float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 _int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set__int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 _int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set__int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 _uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set__uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 _uint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set__uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 _sint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set__sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 _sint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set__sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 _fixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _internal_set__fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 _fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _internal_set__fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 _sfixed32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _internal_set__sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 _sfixed64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _internal_set__sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // bool _bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _internal_set__bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string _string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable__string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.Metadata._string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes _bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable__bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.Metadata.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .nnext.DataType type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::nnext::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double _double = 1;
  if (_internal_has__double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal__double(), target);
  }

  // float _float = 2;
  if (_internal_has__float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal__float(), target);
  }

  // int32 _int32 = 3;
  if (_internal_has__int32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal__int32(), target);
  }

  // int64 _int64 = 4;
  if (_internal_has__int64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal__int64(), target);
  }

  // uint32 _uint32 = 5;
  if (_internal_has__uint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal__uint32(), target);
  }

  // uint64 _uint64 = 6;
  if (_internal_has__uint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal__uint64(), target);
  }

  // sint32 _sint32 = 7;
  if (_internal_has__sint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal__sint32(), target);
  }

  // sint64 _sint64 = 8;
  if (_internal_has__sint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal__sint64(), target);
  }

  // fixed32 _fixed32 = 9;
  if (_internal_has__fixed32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal__fixed32(), target);
  }

  // fixed64 _fixed64 = 10;
  if (_internal_has__fixed64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal__fixed64(), target);
  }

  // sfixed32 _sfixed32 = 11;
  if (_internal_has__sfixed32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(11, this->_internal__sfixed32(), target);
  }

  // sfixed64 _sfixed64 = 12;
  if (_internal_has__sfixed64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(12, this->_internal__sfixed64(), target);
  }

  // bool _bool = 13;
  if (_internal_has__bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal__bool(), target);
  }

  // string _string = 14;
  if (_internal_has__string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__string().data(), static_cast<int>(this->_internal__string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.Metadata._string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal__string(), target);
  }

  // bytes _bytes = 15;
  if (_internal_has__bytes()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal__bytes(), target);
  }

  // string name = 16;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.Metadata.name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_name(), target);
  }

  // .nnext.DataType type = 17;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 16;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .nnext.DataType type = 17;
  if (this->_internal_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (metafield_case()) {
    // double _double = 1;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // float _float = 2;
    case kFloat: {
      total_size += 1 + 4;
      break;
    }
    // int32 _int32 = 3;
    case kInt32: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal__int32());
      break;
    }
    // int64 _int64 = 4;
    case kInt64: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal__int64());
      break;
    }
    // uint32 _uint32 = 5;
    case kUint32: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal__uint32());
      break;
    }
    // uint64 _uint64 = 6;
    case kUint64: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal__uint64());
      break;
    }
    // sint32 _sint32 = 7;
    case kSint32: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal__sint32());
      break;
    }
    // sint64 _sint64 = 8;
    case kSint64: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal__sint64());
      break;
    }
    // fixed32 _fixed32 = 9;
    case kFixed32: {
      total_size += 1 + 4;
      break;
    }
    // fixed64 _fixed64 = 10;
    case kFixed64: {
      total_size += 1 + 8;
      break;
    }
    // sfixed32 _sfixed32 = 11;
    case kSfixed32: {
      total_size += 1 + 4;
      break;
    }
    // sfixed64 _sfixed64 = 12;
    case kSfixed64: {
      total_size += 1 + 8;
      break;
    }
    // bool _bool = 13;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // string _string = 14;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal__string());
      break;
    }
    // bytes _bytes = 15;
    case kBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal__bytes());
      break;
    }
    case METAFIELD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }

void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Metadata *>(to)->MergeFrom(
      static_cast<const Metadata &>(from));
}


void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.metafield_case()) {
    case kDouble: {
      _internal_set__double(from._internal__double());
      break;
    }
    case kFloat: {
      _internal_set__float(from._internal__float());
      break;
    }
    case kInt32: {
      _internal_set__int32(from._internal__int32());
      break;
    }
    case kInt64: {
      _internal_set__int64(from._internal__int64());
      break;
    }
    case kUint32: {
      _internal_set__uint32(from._internal__uint32());
      break;
    }
    case kUint64: {
      _internal_set__uint64(from._internal__uint64());
      break;
    }
    case kSint32: {
      _internal_set__sint32(from._internal__sint32());
      break;
    }
    case kSint64: {
      _internal_set__sint64(from._internal__sint64());
      break;
    }
    case kFixed32: {
      _internal_set__fixed32(from._internal__fixed32());
      break;
    }
    case kFixed64: {
      _internal_set__fixed64(from._internal__fixed64());
      break;
    }
    case kSfixed32: {
      _internal_set__sfixed32(from._internal__sfixed32());
      break;
    }
    case kSfixed64: {
      _internal_set__sfixed64(from._internal__sfixed64());
      break;
    }
    case kBool: {
      _internal_set__bool(from._internal__bool());
      break;
    }
    case kString: {
      _internal_set__string(from._internal__string());
      break;
    }
    case kBytes: {
      _internal_set__bytes(from._internal__bytes());
      break;
    }
    case METAFIELD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_, other->type_);
  swap(metafield_, other->metafield_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[0]);
}

// ===================================================================

class SchemaItem::_Internal {
 public:
};

SchemaItem::SchemaItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.SchemaItem)
}
SchemaItem::SchemaItem(const SchemaItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_indexed_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_indexed_));
  // @@protoc_insertion_point(copy_constructor:nnext.SchemaItem)
}

inline void SchemaItem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_indexed_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_indexed_));
}

SchemaItem::~SchemaItem() {
  // @@protoc_insertion_point(destructor:nnext.SchemaItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SchemaItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaItem::ArenaDtor(void* object) {
  SchemaItem* _this = reinterpret_cast< SchemaItem* >(object);
  (void)_this;
}
void SchemaItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaItem::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.SchemaItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_indexed_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_indexed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nnext.DataType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::nnext::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_primary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_indexed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_indexed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.SchemaItem.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SchemaItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.SchemaItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .nnext.DataType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bool is_primary = 2;
  if (this->_internal_is_primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_primary(), target);
  }

  // bool is_indexed = 3;
  if (this->_internal_is_indexed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_indexed(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.SchemaItem.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.SchemaItem)
  return target;
}

size_t SchemaItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.SchemaItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .nnext.DataType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_primary = 2;
  if (this->_internal_is_primary() != 0) {
    total_size += 1 + 1;
  }

  // bool is_indexed = 3;
  if (this->_internal_is_indexed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchemaItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SchemaItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchemaItem::GetClassData() const { return &_class_data_; }

void SchemaItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SchemaItem *>(to)->MergeFrom(
      static_cast<const SchemaItem &>(from));
}


void SchemaItem::MergeFrom(const SchemaItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.SchemaItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_is_primary() != 0) {
    _internal_set_is_primary(from._internal_is_primary());
  }
  if (from._internal_is_indexed() != 0) {
    _internal_set_is_indexed(from._internal_is_indexed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchemaItem::CopyFrom(const SchemaItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.SchemaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaItem::IsInitialized() const {
  return true;
}

void SchemaItem::InternalSwap(SchemaItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchemaItem, is_indexed_)
      + sizeof(SchemaItem::is_indexed_)
      - PROTOBUF_FIELD_OFFSET(SchemaItem, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[1]);
}

// ===================================================================

Schema_SchemaMapEntry_DoNotUse::Schema_SchemaMapEntry_DoNotUse() {}
Schema_SchemaMapEntry_DoNotUse::Schema_SchemaMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Schema_SchemaMapEntry_DoNotUse::MergeFrom(const Schema_SchemaMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Schema_SchemaMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[2]);
}

// ===================================================================

class Schema::_Internal {
 public:
};

Schema::Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  schema_map_(arena),
  rptd__schema_item_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.Schema)
}
Schema::Schema(const Schema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rptd__schema_item_(from.rptd__schema_item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schema_map_.MergeFrom(from.schema_map_);
  // @@protoc_insertion_point(copy_constructor:nnext.Schema)
}

inline void Schema::SharedCtor() {
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:nnext.Schema)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Schema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Schema::ArenaDtor(void* object) {
  Schema* _this = reinterpret_cast< Schema* >(object);
  (void)_this;
  _this->schema_map_. ~MapField();
}
inline void Schema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Schema::ArenaDtor);
  }
}
void Schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.Schema)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_map_.Clear();
  rptd__schema_item_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Schema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .nnext.SchemaItem> schema_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&schema_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .nnext.SchemaItem rptd__schema_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rptd__schema_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Schema::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.Schema)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .nnext.SchemaItem> schema_map = 1;
  if (!this->_internal_schema_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::SchemaItem >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nnext.Schema.SchemaMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_schema_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_schema_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::SchemaItem >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::SchemaItem >::const_iterator
          it = this->_internal_schema_map().begin();
          it != this->_internal_schema_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Schema_SchemaMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::SchemaItem >::const_iterator
          it = this->_internal_schema_map().begin();
          it != this->_internal_schema_map().end(); ++it) {
        target = Schema_SchemaMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .nnext.SchemaItem rptd__schema_item = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rptd__schema_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rptd__schema_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.Schema)
  return target;
}

size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.Schema)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .nnext.SchemaItem> schema_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_schema_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::SchemaItem >::const_iterator
      it = this->_internal_schema_map().begin();
      it != this->_internal_schema_map().end(); ++it) {
    total_size += Schema_SchemaMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .nnext.SchemaItem rptd__schema_item = 2;
  total_size += 1UL * this->_internal_rptd__schema_item_size();
  for (const auto& msg : this->rptd__schema_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Schema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Schema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Schema::GetClassData() const { return &_class_data_; }

void Schema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Schema *>(to)->MergeFrom(
      static_cast<const Schema &>(from));
}


void Schema::MergeFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  schema_map_.MergeFrom(from.schema_map_);
  rptd__schema_item_.MergeFrom(from.rptd__schema_item_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  return true;
}

void Schema::InternalSwap(Schema* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  schema_map_.InternalSwap(&other->schema_map_);
  rptd__schema_item_.InternalSwap(&other->rptd__schema_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Schema::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[3]);
}

// ===================================================================

class Datum::_Internal {
 public:
};

Datum::Datum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rptd__vector_(arena),
  rptd__metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.Datum)
}
Datum::Datum(const Datum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rptd__vector_(from.rptd__vector_),
      rptd__metadata_(from.rptd__metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nnext.Datum)
}

inline void Datum::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:nnext.Datum)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Datum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Datum::ArenaDtor(void* object) {
  Datum* _this = reinterpret_cast< Datum* >(object);
  (void)_this;
}
void Datum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Datum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.Datum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rptd__vector_.Clear();
  rptd__metadata_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Datum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.Datum.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float rptd__vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rptd__vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_rptd__vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .nnext.Metadata rptd__metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rptd__metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Datum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.Datum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.Datum.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated float rptd__vector = 2;
  if (this->_internal_rptd__vector_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_rptd__vector(), target);
  }

  // repeated .nnext.Metadata rptd__metadata = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rptd__metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rptd__metadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.Datum)
  return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.Datum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rptd__vector = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rptd__vector_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .nnext.Metadata rptd__metadata = 3;
  total_size += 1UL * this->_internal_rptd__metadata_size();
  for (const auto& msg : this->rptd__metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Datum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Datum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Datum::GetClassData() const { return &_class_data_; }

void Datum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Datum *>(to)->MergeFrom(
      static_cast<const Datum &>(from));
}


void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rptd__vector_.MergeFrom(from.rptd__vector_);
  rptd__metadata_.MergeFrom(from.rptd__metadata_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  return true;
}

void Datum::InternalSwap(Datum* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rptd__vector_.InternalSwap(&other->rptd__vector_);
  rptd__metadata_.InternalSwap(&other->rptd__metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Datum::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[4]);
}

// ===================================================================

class DataList::_Internal {
 public:
};

DataList::DataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.DataList)
}
DataList::DataList(const DataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nnext.DataList)
}

inline void DataList::SharedCtor() {
}

DataList::~DataList() {
  // @@protoc_insertion_point(destructor:nnext.DataList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataList::ArenaDtor(void* object) {
  DataList* _this = reinterpret_cast< DataList* >(object);
  (void)_this;
}
void DataList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataList::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.DataList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.DataList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.DataList)
  return target;
}

size_t DataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.DataList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataList::GetClassData() const { return &_class_data_; }

void DataList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataList *>(to)->MergeFrom(
      static_cast<const DataList &>(from));
}


void DataList::MergeFrom(const DataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.DataList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataList::CopyFrom(const DataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.DataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataList::IsInitialized() const {
  return true;
}

void DataList::InternalSwap(DataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[5]);
}

// ===================================================================

class Vector::_Internal {
 public:
};

Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rptd__element_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rptd__element_(from.rptd__element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nnext.Vector)
}

inline void Vector::SharedCtor() {
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:nnext.Vector)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.Vector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rptd__element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float rptd__element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rptd__element(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_rptd__element(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.Vector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float rptd__element = 1;
  if (this->_internal_rptd__element_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_rptd__element(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.Vector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rptd__element = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rptd__element_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector::GetClassData() const { return &_class_data_; }

void Vector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector *>(to)->MergeFrom(
      static_cast<const Vector &>(from));
}


void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rptd__element_.MergeFrom(from.rptd__element_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rptd__element_.InternalSwap(&other->rptd__element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[6]);
}

// ===================================================================

class VectorList::_Internal {
 public:
};

VectorList::VectorList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rptd__vector_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorList)
}
VectorList::VectorList(const VectorList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rptd__vector_(from.rptd__vector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nnext.VectorList)
}

inline void VectorList::SharedCtor() {
}

VectorList::~VectorList() {
  // @@protoc_insertion_point(destructor:nnext.VectorList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorList::ArenaDtor(void* object) {
  VectorList* _this = reinterpret_cast< VectorList* >(object);
  (void)_this;
}
void VectorList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorList::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rptd__vector_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Vector rptd__vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rptd__vector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Vector rptd__vector = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rptd__vector_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rptd__vector(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorList)
  return target;
}

size_t VectorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Vector rptd__vector = 1;
  total_size += 1UL * this->_internal_rptd__vector_size();
  for (const auto& msg : this->rptd__vector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorList::GetClassData() const { return &_class_data_; }

void VectorList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorList *>(to)->MergeFrom(
      static_cast<const VectorList &>(from));
}


void VectorList::MergeFrom(const VectorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rptd__vector_.MergeFrom(from.rptd__vector_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorList::CopyFrom(const VectorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorList::IsInitialized() const {
  return true;
}

void VectorList::InternalSwap(VectorList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rptd__vector_.InternalSwap(&other->rptd__vector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[7]);
}

// ===================================================================

class Index::_Internal {
 public:
  using HasBits = decltype(std::declval<Index>()._has_bits_);
  static void set_has_index_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metric(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::nnext::Schema& schema(const Index* msg);
};

const ::nnext::Schema&
Index::_Internal::schema(const Index* msg) {
  return *msg->schema_;
}
Index::Index(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.Index)
}
Index::Index(const Index& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_schema()) {
    schema_ = new ::nnext::Schema(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  ::memcpy(&dims_, &from.dims_,
    static_cast<size_t>(reinterpret_cast<char*>(&ntotal_) -
    reinterpret_cast<char*>(&dims_)) + sizeof(ntotal_));
  // @@protoc_insertion_point(copy_constructor:nnext.Index)
}

inline void Index::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&schema_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ntotal_) -
    reinterpret_cast<char*>(&schema_)) + sizeof(ntotal_));
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:nnext.Index)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Index::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schema_;
}

void Index::ArenaDtor(void* object) {
  Index* _this = reinterpret_cast< Index* >(object);
  (void)_this;
}
void Index::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.Index)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  dims_ = 0u;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&index_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&metric_) -
        reinterpret_cast<char*>(&index_type_)) + sizeof(metric_));
  }
  ::memset(&is_trained_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ntotal_) -
      reinterpret_cast<char*>(&is_trained_)) + sizeof(ntotal_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Index::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.Index.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .nnext.IndexType index_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index_type(static_cast<::nnext::IndexType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .nnext.MetricType metric = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_metric(static_cast<::nnext::MetricType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_trained = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          is_trained_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ntotal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ntotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .nnext.Schema schema = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Index::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.Index)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.Index.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 dims = 2;
  if (this->_internal_dims() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dims(), target);
  }

  // optional .nnext.IndexType index_type = 3;
  if (_internal_has_index_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_index_type(), target);
  }

  // optional .nnext.MetricType metric = 4;
  if (_internal_has_metric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_metric(), target);
  }

  // bool is_trained = 5;
  if (this->_internal_is_trained() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_trained(), target);
  }

  // uint64 ntotal = 6;
  if (this->_internal_ntotal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_ntotal(), target);
  }

  // .nnext.Schema schema = 7;
  if (this->_internal_has_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::schema(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.Index)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .nnext.Schema schema = 7;
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // uint32 dims = 2;
  if (this->_internal_dims() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dims());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .nnext.IndexType index_type = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_index_type());
    }

    // optional .nnext.MetricType metric = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_metric());
    }

  }
  // bool is_trained = 5;
  if (this->_internal_is_trained() != 0) {
    total_size += 1 + 1;
  }

  // uint64 ntotal = 6;
  if (this->_internal_ntotal() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_ntotal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Index::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Index::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Index::GetClassData() const { return &_class_data_; }

void Index::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Index *>(to)->MergeFrom(
      static_cast<const Index &>(from));
}


void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.Index)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_schema()) {
    _internal_mutable_schema()->::nnext::Schema::MergeFrom(from._internal_schema());
  }
  if (from._internal_dims() != 0) {
    _internal_set_dims(from._internal_dims());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      index_type_ = from.index_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      metric_ = from.metric_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_is_trained() != 0) {
    _internal_set_is_trained(from._internal_is_trained());
  }
  if (from._internal_ntotal() != 0) {
    _internal_set_ntotal(from._internal_ntotal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::InternalSwap(Index* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Index, ntotal_)
      + sizeof(Index::ntotal_)
      - PROTOBUF_FIELD_OFFSET(Index, schema_)>(
          reinterpret_cast<char*>(&schema_),
          reinterpret_cast<char*>(&other->schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Index::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[8]);
}

// ===================================================================

class IndexList::_Internal {
 public:
};

IndexList::IndexList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  indices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.IndexList)
}
IndexList::IndexList(const IndexList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nnext.IndexList)
}

inline void IndexList::SharedCtor() {
}

IndexList::~IndexList() {
  // @@protoc_insertion_point(destructor:nnext.IndexList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IndexList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IndexList::ArenaDtor(void* object) {
  IndexList* _this = reinterpret_cast< IndexList* >(object);
  (void)_this;
}
void IndexList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.IndexList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Index indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_indices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.IndexList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Index indices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_indices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_indices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.IndexList)
  return target;
}

size_t IndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.IndexList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Index indices = 1;
  total_size += 1UL * this->_internal_indices_size();
  for (const auto& msg : this->indices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IndexList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexList::GetClassData() const { return &_class_data_; }

void IndexList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IndexList *>(to)->MergeFrom(
      static_cast<const IndexList &>(from));
}


void IndexList::MergeFrom(const IndexList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.IndexList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexList::CopyFrom(const IndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.IndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexList::IsInitialized() const {
  return true;
}

void IndexList::InternalSwap(IndexList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[9]);
}

// ===================================================================

IndexMap_IndicesEntry_DoNotUse::IndexMap_IndicesEntry_DoNotUse() {}
IndexMap_IndicesEntry_DoNotUse::IndexMap_IndicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IndexMap_IndicesEntry_DoNotUse::MergeFrom(const IndexMap_IndicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IndexMap_IndicesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[10]);
}

// ===================================================================

class IndexMap::_Internal {
 public:
};

IndexMap::IndexMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  indices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.IndexMap)
}
IndexMap::IndexMap(const IndexMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  indices_.MergeFrom(from.indices_);
  // @@protoc_insertion_point(copy_constructor:nnext.IndexMap)
}

inline void IndexMap::SharedCtor() {
}

IndexMap::~IndexMap() {
  // @@protoc_insertion_point(destructor:nnext.IndexMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IndexMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IndexMap::ArenaDtor(void* object) {
  IndexMap* _this = reinterpret_cast< IndexMap* >(object);
  (void)_this;
  _this->indices_. ~MapField();
}
inline void IndexMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &IndexMap::ArenaDtor);
  }
}
void IndexMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndexMap::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.IndexMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .nnext.Index> indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&indices_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.IndexMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .nnext.Index> indices = 1;
  if (!this->_internal_indices().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::Index >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nnext.IndexMap.IndicesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_indices().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_indices().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::Index >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::Index >::const_iterator
          it = this->_internal_indices().begin();
          it != this->_internal_indices().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = IndexMap_IndicesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::Index >::const_iterator
          it = this->_internal_indices().begin();
          it != this->_internal_indices().end(); ++it) {
        target = IndexMap_IndicesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.IndexMap)
  return target;
}

size_t IndexMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.IndexMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .nnext.Index> indices = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_indices_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nnext::Index >::const_iterator
      it = this->_internal_indices().begin();
      it != this->_internal_indices().end(); ++it) {
    total_size += IndexMap_IndicesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IndexMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexMap::GetClassData() const { return &_class_data_; }

void IndexMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IndexMap *>(to)->MergeFrom(
      static_cast<const IndexMap &>(from));
}


void IndexMap::MergeFrom(const IndexMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.IndexMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexMap::CopyFrom(const IndexMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.IndexMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexMap::IsInitialized() const {
  return true;
}

void IndexMap::InternalSwap(IndexMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[11]);
}

// ===================================================================

IdMap_IdxEntry_DoNotUse::IdMap_IdxEntry_DoNotUse() {}
IdMap_IdxEntry_DoNotUse::IdMap_IdxEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IdMap_IdxEntry_DoNotUse::MergeFrom(const IdMap_IdxEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IdMap_IdxEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[12]);
}

// ===================================================================

IdMap_InvEntry_DoNotUse::IdMap_InvEntry_DoNotUse() {}
IdMap_InvEntry_DoNotUse::IdMap_InvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IdMap_InvEntry_DoNotUse::MergeFrom(const IdMap_InvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IdMap_InvEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[13]);
}

// ===================================================================

class IdMap::_Internal {
 public:
};

IdMap::IdMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  idx_(arena),
  inv_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.IdMap)
}
IdMap::IdMap(const IdMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  idx_.MergeFrom(from.idx_);
  inv_.MergeFrom(from.inv_);
  // @@protoc_insertion_point(copy_constructor:nnext.IdMap)
}

inline void IdMap::SharedCtor() {
}

IdMap::~IdMap() {
  // @@protoc_insertion_point(destructor:nnext.IdMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IdMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IdMap::ArenaDtor(void* object) {
  IdMap* _this = reinterpret_cast< IdMap* >(object);
  (void)_this;
  _this->idx_. ~MapField();
  _this->inv_. ~MapField();
}
inline void IdMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &IdMap::ArenaDtor);
  }
}
void IdMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdMap::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.IdMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idx_.Clear();
  inv_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int64> idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&idx_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, string> inv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&inv_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.IdMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int64> idx = 1;
  if (!this->_internal_idx().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nnext.IdMap.IdxEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_idx().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_idx().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_idx().begin();
          it != this->_internal_idx().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = IdMap_IdxEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_idx().begin();
          it != this->_internal_idx().end(); ++it) {
        target = IdMap_IdxEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int64, string> inv = 2;
  if (!this->_internal_inv().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nnext.IdMap.InvEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_inv().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_inv().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_iterator
          it = this->_internal_inv().begin();
          it != this->_internal_inv().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = IdMap_InvEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_iterator
          it = this->_internal_inv().begin();
          it != this->_internal_inv().end(); ++it) {
        target = IdMap_InvEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.IdMap)
  return target;
}

size_t IdMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.IdMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> idx = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_idx_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_idx().begin();
      it != this->_internal_idx().end(); ++it) {
    total_size += IdMap_IdxEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, string> inv = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_inv_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_iterator
      it = this->_internal_inv().begin();
      it != this->_internal_inv().end(); ++it) {
    total_size += IdMap_InvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IdMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdMap::GetClassData() const { return &_class_data_; }

void IdMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IdMap *>(to)->MergeFrom(
      static_cast<const IdMap &>(from));
}


void IdMap::MergeFrom(const IdMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.IdMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  idx_.MergeFrom(from.idx_);
  inv_.MergeFrom(from.inv_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdMap::CopyFrom(const IdMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.IdMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdMap::IsInitialized() const {
  return true;
}

void IdMap::InternalSwap(IdMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  idx_.InternalSwap(&other->idx_);
  inv_.InternalSwap(&other->inv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[14]);
}

// ===================================================================

class CreateIndexRequest::_Internal {
 public:
};

CreateIndexRequest::CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.CreateIndexRequest)
}
CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema().empty()) {
    schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema(), 
      GetArenaForAllocation());
  }
  ::memcpy(&dims_, &from.dims_,
    static_cast<size_t>(reinterpret_cast<char*>(&metric_type_) -
    reinterpret_cast<char*>(&dims_)) + sizeof(metric_type_));
  // @@protoc_insertion_point(copy_constructor:nnext.CreateIndexRequest)
}

inline void CreateIndexRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dims_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metric_type_) -
    reinterpret_cast<char*>(&dims_)) + sizeof(metric_type_));
}

CreateIndexRequest::~CreateIndexRequest() {
  // @@protoc_insertion_point(destructor:nnext.CreateIndexRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateIndexRequest::ArenaDtor(void* object) {
  CreateIndexRequest* _this = reinterpret_cast< CreateIndexRequest* >(object);
  (void)_this;
}
void CreateIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.CreateIndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  schema_.ClearToEmpty();
  ::memset(&dims_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metric_type_) -
      reinterpret_cast<char*>(&dims_)) + sizeof(metric_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.CreateIndexRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .nnext.IndexType index_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index_type(static_cast<::nnext::IndexType>(val));
        } else
          goto handle_unusual;
        continue;
      // .nnext.MetricType metric_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_metric_type(static_cast<::nnext::MetricType>(val));
        } else
          goto handle_unusual;
        continue;
      // string schema = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_schema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.CreateIndexRequest.schema"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateIndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.CreateIndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.CreateIndexRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 dims = 2;
  if (this->_internal_dims() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dims(), target);
  }

  // .nnext.IndexType index_type = 3;
  if (this->_internal_index_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_index_type(), target);
  }

  // .nnext.MetricType metric_type = 4;
  if (this->_internal_metric_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_metric_type(), target);
  }

  // string schema = 5;
  if (!this->_internal_schema().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema().data(), static_cast<int>(this->_internal_schema().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.CreateIndexRequest.schema");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_schema(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.CreateIndexRequest)
  return target;
}

size_t CreateIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.CreateIndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string schema = 5;
  if (!this->_internal_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema());
  }

  // int32 dims = 2;
  if (this->_internal_dims() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dims());
  }

  // .nnext.IndexType index_type = 3;
  if (this->_internal_index_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_index_type());
  }

  // .nnext.MetricType metric_type = 4;
  if (this->_internal_metric_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_metric_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateIndexRequest::GetClassData() const { return &_class_data_; }

void CreateIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateIndexRequest *>(to)->MergeFrom(
      static_cast<const CreateIndexRequest &>(from));
}


void CreateIndexRequest::MergeFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_schema().empty()) {
    _internal_set_schema(from._internal_schema());
  }
  if (from._internal_dims() != 0) {
    _internal_set_dims(from._internal_dims());
  }
  if (from._internal_index_type() != 0) {
    _internal_set_index_type(from._internal_index_type());
  }
  if (from._internal_metric_type() != 0) {
    _internal_set_metric_type(from._internal_metric_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateIndexRequest::CopyFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexRequest::IsInitialized() const {
  return true;
}

void CreateIndexRequest::InternalSwap(CreateIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &schema_, lhs_arena,
      &other->schema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateIndexRequest, metric_type_)
      + sizeof(CreateIndexRequest::metric_type_)
      - PROTOBUF_FIELD_OFFSET(CreateIndexRequest, dims_)>(
          reinterpret_cast<char*>(&dims_),
          reinterpret_cast<char*>(&other->dims_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[15]);
}

// ===================================================================

class CreateIndexResponse::_Internal {
 public:
  static const ::nnext::Index& index(const CreateIndexResponse* msg);
};

const ::nnext::Index&
CreateIndexResponse::_Internal::index(const CreateIndexResponse* msg) {
  return *msg->index_;
}
CreateIndexResponse::CreateIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.CreateIndexResponse)
}
CreateIndexResponse::CreateIndexResponse(const CreateIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index()) {
    index_ = new ::nnext::Index(*from.index_);
  } else {
    index_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nnext.CreateIndexResponse)
}

inline void CreateIndexResponse::SharedCtor() {
index_ = nullptr;
}

CreateIndexResponse::~CreateIndexResponse() {
  // @@protoc_insertion_point(destructor:nnext.CreateIndexResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete index_;
}

void CreateIndexResponse::ArenaDtor(void* object) {
  CreateIndexResponse* _this = reinterpret_cast< CreateIndexResponse* >(object);
  (void)_this;
}
void CreateIndexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.CreateIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nnext.Index index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.CreateIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .nnext.Index index = 1;
  if (this->_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::index(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.CreateIndexResponse)
  return target;
}

size_t CreateIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.CreateIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nnext.Index index = 1;
  if (this->_internal_has_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateIndexResponse::GetClassData() const { return &_class_data_; }

void CreateIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateIndexResponse *>(to)->MergeFrom(
      static_cast<const CreateIndexResponse &>(from));
}


void CreateIndexResponse::MergeFrom(const CreateIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.CreateIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _internal_mutable_index()->::nnext::Index::MergeFrom(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateIndexResponse::CopyFrom(const CreateIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.CreateIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexResponse::IsInitialized() const {
  return true;
}

void CreateIndexResponse::InternalSwap(CreateIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[16]);
}

// ===================================================================

class ListIndicesRequest::_Internal {
 public:
};

ListIndicesRequest::ListIndicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.ListIndicesRequest)
}
ListIndicesRequest::ListIndicesRequest(const ListIndicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pattern().empty()) {
    pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pattern(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&dims_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(dims_));
  // @@protoc_insertion_point(copy_constructor:nnext.ListIndicesRequest)
}

inline void ListIndicesRequest::SharedCtor() {
pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dims_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(dims_));
}

ListIndicesRequest::~ListIndicesRequest() {
  // @@protoc_insertion_point(destructor:nnext.ListIndicesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListIndicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListIndicesRequest::ArenaDtor(void* object) {
  ListIndicesRequest* _this = reinterpret_cast< ListIndicesRequest* >(object);
  (void)_this;
}
void ListIndicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListIndicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListIndicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.ListIndicesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_.ClearToEmpty();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dims_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(dims_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIndicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.ListIndicesRequest.pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dims = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListIndicesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.ListIndicesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pattern = 1;
  if (!this->_internal_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pattern().data(), static_cast<int>(this->_internal_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.ListIndicesRequest.pattern");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pattern(), target);
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  // uint32 dims = 4;
  if (this->_internal_dims() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dims(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.ListIndicesRequest)
  return target;
}

size_t ListIndicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.ListIndicesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pattern = 1;
  if (!this->_internal_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pattern());
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // uint32 dims = 4;
  if (this->_internal_dims() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dims());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListIndicesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListIndicesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListIndicesRequest::GetClassData() const { return &_class_data_; }

void ListIndicesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListIndicesRequest *>(to)->MergeFrom(
      static_cast<const ListIndicesRequest &>(from));
}


void ListIndicesRequest::MergeFrom(const ListIndicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.ListIndicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pattern().empty()) {
    _internal_set_pattern(from._internal_pattern());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_dims() != 0) {
    _internal_set_dims(from._internal_dims());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListIndicesRequest::CopyFrom(const ListIndicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.ListIndicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndicesRequest::IsInitialized() const {
  return true;
}

void ListIndicesRequest::InternalSwap(ListIndicesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pattern_, lhs_arena,
      &other->pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListIndicesRequest, dims_)
      + sizeof(ListIndicesRequest::dims_)
      - PROTOBUF_FIELD_OFFSET(ListIndicesRequest, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIndicesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[17]);
}

// ===================================================================

class ListIndicesResponse::_Internal {
 public:
};

ListIndicesResponse::ListIndicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  indices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.ListIndicesResponse)
}
ListIndicesResponse::ListIndicesResponse(const ListIndicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:nnext.ListIndicesResponse)
}

inline void ListIndicesResponse::SharedCtor() {
total_ = 0u;
}

ListIndicesResponse::~ListIndicesResponse() {
  // @@protoc_insertion_point(destructor:nnext.ListIndicesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListIndicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListIndicesResponse::ArenaDtor(void* object) {
  ListIndicesResponse* _this = reinterpret_cast< ListIndicesResponse* >(object);
  (void)_this;
}
void ListIndicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListIndicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListIndicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.ListIndicesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  total_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIndicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Index indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_indices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListIndicesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.ListIndicesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Index indices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_indices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_indices(i), target, stream);
  }

  // uint32 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.ListIndicesResponse)
  return target;
}

size_t ListIndicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.ListIndicesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Index indices = 1;
  total_size += 1UL * this->_internal_indices_size();
  for (const auto& msg : this->indices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListIndicesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListIndicesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListIndicesResponse::GetClassData() const { return &_class_data_; }

void ListIndicesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListIndicesResponse *>(to)->MergeFrom(
      static_cast<const ListIndicesResponse &>(from));
}


void ListIndicesResponse::MergeFrom(const ListIndicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.ListIndicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListIndicesResponse::CopyFrom(const ListIndicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.ListIndicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndicesResponse::IsInitialized() const {
  return true;
}

void ListIndicesResponse::InternalSwap(ListIndicesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIndicesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[18]);
}

// ===================================================================

class DropIndexRequest::_Internal {
 public:
};

DropIndexRequest::DropIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.DropIndexRequest)
}
DropIndexRequest::DropIndexRequest(const DropIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nnext.DropIndexRequest)
}

inline void DropIndexRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DropIndexRequest::~DropIndexRequest() {
  // @@protoc_insertion_point(destructor:nnext.DropIndexRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DropIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DropIndexRequest::ArenaDtor(void* object) {
  DropIndexRequest* _this = reinterpret_cast< DropIndexRequest* >(object);
  (void)_this;
}
void DropIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.DropIndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.DropIndexRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropIndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.DropIndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.DropIndexRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.DropIndexRequest)
  return target;
}

size_t DropIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.DropIndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropIndexRequest::GetClassData() const { return &_class_data_; }

void DropIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DropIndexRequest *>(to)->MergeFrom(
      static_cast<const DropIndexRequest &>(from));
}


void DropIndexRequest::MergeFrom(const DropIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.DropIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropIndexRequest::CopyFrom(const DropIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.DropIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexRequest::IsInitialized() const {
  return true;
}

void DropIndexRequest::InternalSwap(DropIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DropIndexRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[19]);
}

// ===================================================================

class DropIndexResponse::_Internal {
 public:
  static const ::nnext::Index& index(const DropIndexResponse* msg);
};

const ::nnext::Index&
DropIndexResponse::_Internal::index(const DropIndexResponse* msg) {
  return *msg->index_;
}
DropIndexResponse::DropIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.DropIndexResponse)
}
DropIndexResponse::DropIndexResponse(const DropIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index()) {
    index_ = new ::nnext::Index(*from.index_);
  } else {
    index_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nnext.DropIndexResponse)
}

inline void DropIndexResponse::SharedCtor() {
index_ = nullptr;
}

DropIndexResponse::~DropIndexResponse() {
  // @@protoc_insertion_point(destructor:nnext.DropIndexResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DropIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete index_;
}

void DropIndexResponse::ArenaDtor(void* object) {
  DropIndexResponse* _this = reinterpret_cast< DropIndexResponse* >(object);
  (void)_this;
}
void DropIndexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.DropIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nnext.Index index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.DropIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .nnext.Index index = 1;
  if (this->_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::index(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.DropIndexResponse)
  return target;
}

size_t DropIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.DropIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nnext.Index index = 1;
  if (this->_internal_has_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropIndexResponse::GetClassData() const { return &_class_data_; }

void DropIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DropIndexResponse *>(to)->MergeFrom(
      static_cast<const DropIndexResponse &>(from));
}


void DropIndexResponse::MergeFrom(const DropIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.DropIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _internal_mutable_index()->::nnext::Index::MergeFrom(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropIndexResponse::CopyFrom(const DropIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.DropIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexResponse::IsInitialized() const {
  return true;
}

void DropIndexResponse::InternalSwap(DropIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropIndexResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[20]);
}

// ===================================================================

class VectorAddRequest::_Internal {
 public:
};

VectorAddRequest::VectorAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorAddRequest)
}
VectorAddRequest::VectorAddRequest(const VectorAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    index_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index_name(), 
      GetArenaForAllocation());
  }
  header_cols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_cols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_cols().empty()) {
    header_cols_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header_cols(), 
      GetArenaForAllocation());
  }
  header_types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_types().empty()) {
    header_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header_types(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nnext.VectorAddRequest)
}

inline void VectorAddRequest::SharedCtor() {
index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_cols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_cols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_types_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VectorAddRequest::~VectorAddRequest() {
  // @@protoc_insertion_point(destructor:nnext.VectorAddRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorAddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_cols_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_types_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorAddRequest::ArenaDtor(void* object) {
  VectorAddRequest* _this = reinterpret_cast< VectorAddRequest* >(object);
  (void)_this;
}
void VectorAddRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorAddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorAddRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  index_name_.ClearToEmpty();
  header_cols_.ClearToEmpty();
  header_types_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorAddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.VectorAddRequest.index_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string header_cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_header_cols();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.VectorAddRequest.header_cols"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string header_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_header_types();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.VectorAddRequest.header_types"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .nnext.Datum data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorAddRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorAddRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.VectorAddRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  // string header_cols = 2;
  if (!this->_internal_header_cols().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_cols().data(), static_cast<int>(this->_internal_header_cols().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.VectorAddRequest.header_cols");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_header_cols(), target);
  }

  // string header_types = 3;
  if (!this->_internal_header_types().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_types().data(), static_cast<int>(this->_internal_header_types().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.VectorAddRequest.header_types");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_header_types(), target);
  }

  // repeated .nnext.Datum data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorAddRequest)
  return target;
}

size_t VectorAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorAddRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 4;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_name = 1;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // string header_cols = 2;
  if (!this->_internal_header_cols().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_cols());
  }

  // string header_types = 3;
  if (!this->_internal_header_types().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_types());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorAddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorAddRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorAddRequest::GetClassData() const { return &_class_data_; }

void VectorAddRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorAddRequest *>(to)->MergeFrom(
      static_cast<const VectorAddRequest &>(from));
}


void VectorAddRequest::MergeFrom(const VectorAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_index_name().empty()) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (!from._internal_header_cols().empty()) {
    _internal_set_header_cols(from._internal_header_cols());
  }
  if (!from._internal_header_types().empty()) {
    _internal_set_header_types(from._internal_header_types());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorAddRequest::CopyFrom(const VectorAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorAddRequest::IsInitialized() const {
  return true;
}

void VectorAddRequest::InternalSwap(VectorAddRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &index_name_, lhs_arena,
      &other->index_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_cols_, lhs_arena,
      &other->header_cols_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_types_, lhs_arena,
      &other->header_types_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorAddRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[21]);
}

// ===================================================================

class VectorAddResponse::_Internal {
 public:
};

VectorAddResponse::VectorAddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorAddResponse)
}
VectorAddResponse::VectorAddResponse(const VectorAddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:nnext.VectorAddResponse)
}

inline void VectorAddResponse::SharedCtor() {
total_ = uint64_t{0u};
}

VectorAddResponse::~VectorAddResponse() {
  // @@protoc_insertion_point(destructor:nnext.VectorAddResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorAddResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorAddResponse::ArenaDtor(void* object) {
  VectorAddResponse* _this = reinterpret_cast< VectorAddResponse* >(object);
  (void)_this;
}
void VectorAddResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorAddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorAddResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorAddResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Datum data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorAddResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorAddResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorAddResponse)
  return target;
}

size_t VectorAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorAddResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorAddResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorAddResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorAddResponse::GetClassData() const { return &_class_data_; }

void VectorAddResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorAddResponse *>(to)->MergeFrom(
      static_cast<const VectorAddResponse &>(from));
}


void VectorAddResponse::MergeFrom(const VectorAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorAddResponse::CopyFrom(const VectorAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorAddResponse::IsInitialized() const {
  return true;
}

void VectorAddResponse::InternalSwap(VectorAddResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorAddResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[22]);
}

// ===================================================================

class VectorSearchRequest::_Internal {
 public:
};

VectorSearchRequest::VectorSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rptd_query_vector_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorSearchRequest)
}
VectorSearchRequest::VectorSearchRequest(const VectorSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rptd_query_vector_(from.rptd_query_vector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    index_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index_name(), 
      GetArenaForAllocation());
  }
  filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filters().empty()) {
    filters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filters(), 
      GetArenaForAllocation());
  }
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&omit_metadata_) -
    reinterpret_cast<char*>(&k_)) + sizeof(omit_metadata_));
  // @@protoc_insertion_point(copy_constructor:nnext.VectorSearchRequest)
}

inline void VectorSearchRequest::SharedCtor() {
index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&k_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&omit_metadata_) -
    reinterpret_cast<char*>(&k_)) + sizeof(omit_metadata_));
}

VectorSearchRequest::~VectorSearchRequest() {
  // @@protoc_insertion_point(destructor:nnext.VectorSearchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorSearchRequest::ArenaDtor(void* object) {
  VectorSearchRequest* _this = reinterpret_cast< VectorSearchRequest* >(object);
  (void)_this;
}
void VectorSearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorSearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rptd_query_vector_.Clear();
  index_name_.ClearToEmpty();
  filters_.ClearToEmpty();
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&omit_metadata_) -
      reinterpret_cast<char*>(&k_)) + sizeof(omit_metadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.VectorSearchRequest.index_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .nnext.Vector rptd_query_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rptd_query_vector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.VectorSearchRequest.filters"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool omit_vector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          omit_vector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool omit_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          omit_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorSearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorSearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.VectorSearchRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  // repeated .nnext.Vector rptd_query_vector = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rptd_query_vector_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rptd_query_vector(i), target, stream);
  }

  // uint32 k = 3;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_k(), target);
  }

  // string filters = 4;
  if (!this->_internal_filters().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filters().data(), static_cast<int>(this->_internal_filters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.VectorSearchRequest.filters");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filters(), target);
  }

  // bool omit_vector = 5;
  if (this->_internal_omit_vector() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_omit_vector(), target);
  }

  // bool omit_metadata = 6;
  if (this->_internal_omit_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_omit_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorSearchRequest)
  return target;
}

size_t VectorSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorSearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Vector rptd_query_vector = 2;
  total_size += 1UL * this->_internal_rptd_query_vector_size();
  for (const auto& msg : this->rptd_query_vector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_name = 1;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // string filters = 4;
  if (!this->_internal_filters().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filters());
  }

  // uint32 k = 3;
  if (this->_internal_k() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_k());
  }

  // bool omit_vector = 5;
  if (this->_internal_omit_vector() != 0) {
    total_size += 1 + 1;
  }

  // bool omit_metadata = 6;
  if (this->_internal_omit_metadata() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorSearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorSearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorSearchRequest::GetClassData() const { return &_class_data_; }

void VectorSearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorSearchRequest *>(to)->MergeFrom(
      static_cast<const VectorSearchRequest &>(from));
}


void VectorSearchRequest::MergeFrom(const VectorSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rptd_query_vector_.MergeFrom(from.rptd_query_vector_);
  if (!from._internal_index_name().empty()) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (!from._internal_filters().empty()) {
    _internal_set_filters(from._internal_filters());
  }
  if (from._internal_k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (from._internal_omit_vector() != 0) {
    _internal_set_omit_vector(from._internal_omit_vector());
  }
  if (from._internal_omit_metadata() != 0) {
    _internal_set_omit_metadata(from._internal_omit_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorSearchRequest::CopyFrom(const VectorSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorSearchRequest::IsInitialized() const {
  return true;
}

void VectorSearchRequest::InternalSwap(VectorSearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rptd_query_vector_.InternalSwap(&other->rptd_query_vector_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &index_name_, lhs_arena,
      &other->index_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filters_, lhs_arena,
      &other->filters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorSearchRequest, omit_metadata_)
      + sizeof(VectorSearchRequest::omit_metadata_)
      - PROTOBUF_FIELD_OFFSET(VectorSearchRequest, k_)>(
          reinterpret_cast<char*>(&k_),
          reinterpret_cast<char*>(&other->k_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorSearchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[23]);
}

// ===================================================================

class VectorSearchResponse::_Internal {
 public:
};

VectorSearchResponse::VectorSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rptd__datum_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorSearchResponse)
}
VectorSearchResponse::VectorSearchResponse(const VectorSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rptd__datum_(from.rptd__datum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page().empty()) {
    page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page(), 
      GetArenaForAllocation());
  }
  ntotal_ = from.ntotal_;
  // @@protoc_insertion_point(copy_constructor:nnext.VectorSearchResponse)
}

inline void VectorSearchResponse::SharedCtor() {
page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ntotal_ = uint64_t{0u};
}

VectorSearchResponse::~VectorSearchResponse() {
  // @@protoc_insertion_point(destructor:nnext.VectorSearchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorSearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorSearchResponse::ArenaDtor(void* object) {
  VectorSearchResponse* _this = reinterpret_cast< VectorSearchResponse* >(object);
  (void)_this;
}
void VectorSearchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorSearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorSearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rptd__datum_.Clear();
  page_.ClearToEmpty();
  ntotal_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorSearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_page();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.VectorSearchResponse.page"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ntotal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ntotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .nnext.Datum rptd__datum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rptd__datum(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorSearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorSearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string page = 1;
  if (!this->_internal_page().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page().data(), static_cast<int>(this->_internal_page().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.VectorSearchResponse.page");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_page(), target);
  }

  // uint64 ntotal = 2;
  if (this->_internal_ntotal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ntotal(), target);
  }

  // repeated .nnext.Datum rptd__datum = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rptd__datum_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rptd__datum(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorSearchResponse)
  return target;
}

size_t VectorSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorSearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Datum rptd__datum = 3;
  total_size += 1UL * this->_internal_rptd__datum_size();
  for (const auto& msg : this->rptd__datum_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string page = 1;
  if (!this->_internal_page().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page());
  }

  // uint64 ntotal = 2;
  if (this->_internal_ntotal() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_ntotal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorSearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorSearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorSearchResponse::GetClassData() const { return &_class_data_; }

void VectorSearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorSearchResponse *>(to)->MergeFrom(
      static_cast<const VectorSearchResponse &>(from));
}


void VectorSearchResponse::MergeFrom(const VectorSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rptd__datum_.MergeFrom(from.rptd__datum_);
  if (!from._internal_page().empty()) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_ntotal() != 0) {
    _internal_set_ntotal(from._internal_ntotal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorSearchResponse::CopyFrom(const VectorSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorSearchResponse::IsInitialized() const {
  return true;
}

void VectorSearchResponse::InternalSwap(VectorSearchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rptd__datum_.InternalSwap(&other->rptd__datum_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_, lhs_arena,
      &other->page_, rhs_arena
  );
  swap(ntotal_, other->ntotal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorSearchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[24]);
}

// ===================================================================

class VectorGetRequest::_Internal {
 public:
};

VectorGetRequest::VectorGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorGetRequest)
}
VectorGetRequest::VectorGetRequest(const VectorGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_name().empty()) {
    index_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nnext.VectorGetRequest)
}

inline void VectorGetRequest::SharedCtor() {
index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VectorGetRequest::~VectorGetRequest() {
  // @@protoc_insertion_point(destructor:nnext.VectorGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorGetRequest::ArenaDtor(void* object) {
  VectorGetRequest* _this = reinterpret_cast< VectorGetRequest* >(object);
  (void)_this;
}
void VectorGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  index_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Datum data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string index_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nnext.VectorGetRequest.index_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nnext.VectorGetRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorGetRequest)
  return target;
}

size_t VectorGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_name = 2;
  if (!this->_internal_index_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorGetRequest::GetClassData() const { return &_class_data_; }

void VectorGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorGetRequest *>(to)->MergeFrom(
      static_cast<const VectorGetRequest &>(from));
}


void VectorGetRequest::MergeFrom(const VectorGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_index_name().empty()) {
    _internal_set_index_name(from._internal_index_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorGetRequest::CopyFrom(const VectorGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorGetRequest::IsInitialized() const {
  return true;
}

void VectorGetRequest::InternalSwap(VectorGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &index_name_, lhs_arena,
      &other->index_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[25]);
}

// ===================================================================

class VectorGetResponse::_Internal {
 public:
};

VectorGetResponse::VectorGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorGetResponse)
}
VectorGetResponse::VectorGetResponse(const VectorGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nnext.VectorGetResponse)
}

inline void VectorGetResponse::SharedCtor() {
}

VectorGetResponse::~VectorGetResponse() {
  // @@protoc_insertion_point(destructor:nnext.VectorGetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorGetResponse::ArenaDtor(void* object) {
  VectorGetResponse* _this = reinterpret_cast< VectorGetResponse* >(object);
  (void)_this;
}
void VectorGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Datum data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorGetResponse)
  return target;
}

size_t VectorGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorGetResponse::GetClassData() const { return &_class_data_; }

void VectorGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorGetResponse *>(to)->MergeFrom(
      static_cast<const VectorGetResponse &>(from));
}


void VectorGetResponse::MergeFrom(const VectorGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorGetResponse::CopyFrom(const VectorGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorGetResponse::IsInitialized() const {
  return true;
}

void VectorGetResponse::InternalSwap(VectorGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorGetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[26]);
}

// ===================================================================

class VectorDeleteRequest::_Internal {
 public:
};

VectorDeleteRequest::VectorDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorDeleteRequest)
}
VectorDeleteRequest::VectorDeleteRequest(const VectorDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nnext.VectorDeleteRequest)
}

inline void VectorDeleteRequest::SharedCtor() {
}

VectorDeleteRequest::~VectorDeleteRequest() {
  // @@protoc_insertion_point(destructor:nnext.VectorDeleteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorDeleteRequest::ArenaDtor(void* object) {
  VectorDeleteRequest* _this = reinterpret_cast< VectorDeleteRequest* >(object);
  (void)_this;
}
void VectorDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Datum data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorDeleteRequest)
  return target;
}

size_t VectorDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorDeleteRequest::GetClassData() const { return &_class_data_; }

void VectorDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorDeleteRequest *>(to)->MergeFrom(
      static_cast<const VectorDeleteRequest &>(from));
}


void VectorDeleteRequest::MergeFrom(const VectorDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorDeleteRequest::CopyFrom(const VectorDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorDeleteRequest::IsInitialized() const {
  return true;
}

void VectorDeleteRequest::InternalSwap(VectorDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorDeleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[27]);
}

// ===================================================================

class VectorDeleteResponse::_Internal {
 public:
};

VectorDeleteResponse::VectorDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorDeleteResponse)
}
VectorDeleteResponse::VectorDeleteResponse(const VectorDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nnext.VectorDeleteResponse)
}

inline void VectorDeleteResponse::SharedCtor() {
}

VectorDeleteResponse::~VectorDeleteResponse() {
  // @@protoc_insertion_point(destructor:nnext.VectorDeleteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorDeleteResponse::ArenaDtor(void* object) {
  VectorDeleteResponse* _this = reinterpret_cast< VectorDeleteResponse* >(object);
  (void)_this;
}
void VectorDeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorDeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Datum data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorDeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorDeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorDeleteResponse)
  return target;
}

size_t VectorDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorDeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorDeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorDeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorDeleteResponse::GetClassData() const { return &_class_data_; }

void VectorDeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorDeleteResponse *>(to)->MergeFrom(
      static_cast<const VectorDeleteResponse &>(from));
}


void VectorDeleteResponse::MergeFrom(const VectorDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorDeleteResponse::CopyFrom(const VectorDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorDeleteResponse::IsInitialized() const {
  return true;
}

void VectorDeleteResponse::InternalSwap(VectorDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorDeleteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[28]);
}

// ===================================================================

class VectorClearRequest::_Internal {
 public:
};

VectorClearRequest::VectorClearRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorClearRequest)
}
VectorClearRequest::VectorClearRequest(const VectorClearRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nnext.VectorClearRequest)
}

inline void VectorClearRequest::SharedCtor() {
}

VectorClearRequest::~VectorClearRequest() {
  // @@protoc_insertion_point(destructor:nnext.VectorClearRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorClearRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorClearRequest::ArenaDtor(void* object) {
  VectorClearRequest* _this = reinterpret_cast< VectorClearRequest* >(object);
  (void)_this;
}
void VectorClearRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorClearRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorClearRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorClearRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorClearRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Datum data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorClearRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorClearRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorClearRequest)
  return target;
}

size_t VectorClearRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorClearRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorClearRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorClearRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorClearRequest::GetClassData() const { return &_class_data_; }

void VectorClearRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorClearRequest *>(to)->MergeFrom(
      static_cast<const VectorClearRequest &>(from));
}


void VectorClearRequest::MergeFrom(const VectorClearRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorClearRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorClearRequest::CopyFrom(const VectorClearRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorClearRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorClearRequest::IsInitialized() const {
  return true;
}

void VectorClearRequest::InternalSwap(VectorClearRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorClearRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[29]);
}

// ===================================================================

class VectorClearResponse::_Internal {
 public:
};

VectorClearResponse::VectorClearResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:nnext.VectorClearResponse)
}
VectorClearResponse::VectorClearResponse(const VectorClearResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nnext.VectorClearResponse)
}

inline void VectorClearResponse::SharedCtor() {
}

VectorClearResponse::~VectorClearResponse() {
  // @@protoc_insertion_point(destructor:nnext.VectorClearResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorClearResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorClearResponse::ArenaDtor(void* object) {
  VectorClearResponse* _this = reinterpret_cast< VectorClearResponse* >(object);
  (void)_this;
}
void VectorClearResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorClearResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorClearResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nnext.VectorClearResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorClearResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nnext.Datum data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorClearResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nnext.VectorClearResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nnext.VectorClearResponse)
  return target;
}

size_t VectorClearResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nnext.VectorClearResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nnext.Datum data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorClearResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorClearResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorClearResponse::GetClassData() const { return &_class_data_; }

void VectorClearResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorClearResponse *>(to)->MergeFrom(
      static_cast<const VectorClearResponse &>(from));
}


void VectorClearResponse::MergeFrom(const VectorClearResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nnext.VectorClearResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorClearResponse::CopyFrom(const VectorClearResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nnext.VectorClearResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorClearResponse::IsInitialized() const {
  return true;
}

void VectorClearResponse::InternalSwap(VectorClearResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorClearResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_main_2eproto_getter, &descriptor_table_main_2eproto_once,
      file_level_metadata_main_2eproto[30]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace nnext
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nnext::Metadata* Arena::CreateMaybeMessage< ::nnext::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::SchemaItem* Arena::CreateMaybeMessage< ::nnext::SchemaItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::SchemaItem >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::Schema_SchemaMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::nnext::Schema_SchemaMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::Schema_SchemaMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::Schema* Arena::CreateMaybeMessage< ::nnext::Schema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::Schema >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::Datum* Arena::CreateMaybeMessage< ::nnext::Datum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::Datum >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::DataList* Arena::CreateMaybeMessage< ::nnext::DataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::DataList >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::Vector* Arena::CreateMaybeMessage< ::nnext::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorList* Arena::CreateMaybeMessage< ::nnext::VectorList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorList >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::Index* Arena::CreateMaybeMessage< ::nnext::Index >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::Index >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::IndexList* Arena::CreateMaybeMessage< ::nnext::IndexList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::IndexList >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::IndexMap_IndicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nnext::IndexMap_IndicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::IndexMap_IndicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::IndexMap* Arena::CreateMaybeMessage< ::nnext::IndexMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::IndexMap >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::IdMap_IdxEntry_DoNotUse* Arena::CreateMaybeMessage< ::nnext::IdMap_IdxEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::IdMap_IdxEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::IdMap_InvEntry_DoNotUse* Arena::CreateMaybeMessage< ::nnext::IdMap_InvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::IdMap_InvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::IdMap* Arena::CreateMaybeMessage< ::nnext::IdMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::IdMap >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::CreateIndexRequest* Arena::CreateMaybeMessage< ::nnext::CreateIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::CreateIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::CreateIndexResponse* Arena::CreateMaybeMessage< ::nnext::CreateIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::CreateIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::ListIndicesRequest* Arena::CreateMaybeMessage< ::nnext::ListIndicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::ListIndicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::ListIndicesResponse* Arena::CreateMaybeMessage< ::nnext::ListIndicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::ListIndicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::DropIndexRequest* Arena::CreateMaybeMessage< ::nnext::DropIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::DropIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::DropIndexResponse* Arena::CreateMaybeMessage< ::nnext::DropIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::DropIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorAddRequest* Arena::CreateMaybeMessage< ::nnext::VectorAddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorAddResponse* Arena::CreateMaybeMessage< ::nnext::VectorAddResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorAddResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorSearchRequest* Arena::CreateMaybeMessage< ::nnext::VectorSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorSearchResponse* Arena::CreateMaybeMessage< ::nnext::VectorSearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorGetRequest* Arena::CreateMaybeMessage< ::nnext::VectorGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorGetResponse* Arena::CreateMaybeMessage< ::nnext::VectorGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorDeleteRequest* Arena::CreateMaybeMessage< ::nnext::VectorDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorDeleteResponse* Arena::CreateMaybeMessage< ::nnext::VectorDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorClearRequest* Arena::CreateMaybeMessage< ::nnext::VectorClearRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorClearRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nnext::VectorClearResponse* Arena::CreateMaybeMessage< ::nnext::VectorClearResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nnext::VectorClearResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
